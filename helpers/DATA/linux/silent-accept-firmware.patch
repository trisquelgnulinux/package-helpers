The Linux-Libre deblob script that is used to make the Trisquel kernel packages disables all functionality related to loading nonfree firmware blobs. Even if the user chooses to install the blob files, these would still not be loaded and the driver would not activate.
An alternative solution is to preserve the loading functionality and remove the *advertisment* to the user of the blob filenames when these fail to be loaded, as to not imply that those files are recommended in any way, so the driver would just print "failed to load firmware" or equivalent. This allows the user to use the driver if they so decide.

This method is done by a patch (silent-accept-firmware.patch) that removes all the instances where the blob filenames are printed to the user (via kernel logs), and a section on the package helper that takes care of preventing the deblob script from acting on the files modified by the patch. This is done manually, for individual drivers (usually those for very common devices). It needs to be reviewed on any new major release, checking that no new lines were added to the upstream driver in where it prints the blob filename on the log.
Printing the blob filename on success operations (that is, when the blob file is present) is acceptable. If in doubt, all instances of printing the blob filenames should be removed.

diff --color -Nru a/arch/x86/kernel/cpu/microcode/amd.c b/arch/x86/kernel/cpu/microcode/amd.c
--- a/arch/x86/kernel/cpu/microcode/amd.c	2023-03-09 11:48:45.000000000 -0600
+++ b/arch/x86/kernel/cpu/microcode/amd.c	2023-03-09 11:53:09.989441841 -0600
@@ -918,7 +918,7 @@
 		snprintf(fw_name, sizeof(fw_name), "amd-ucode/microcode_amd_fam%.2xh.bin", c->x86);
 
 	if (request_firmware_direct(&fw, (const char *)fw_name, device)) {
-		pr_debug("failed to load file %s\n", fw_name);
+		pr_debug("failed to load file\n");
 		goto out;
 	}
 
diff --color -Nru a/arch/x86/kernel/cpu/microcode/intel.c b/arch/x86/kernel/cpu/microcode/intel.c
--- a/arch/x86/kernel/cpu/microcode/intel.c	2022-07-31 16:03:01.000000000 -0500
+++ b/arch/x86/kernel/cpu/microcode/intel.c	2023-03-09 11:53:09.989441841 -0600
@@ -902,7 +902,7 @@
 		c->x86, c->x86_model, c->x86_stepping);
 
 	if (request_firmware_direct(&firmware, name, device)) {
-		pr_debug("data file %s load failed\n", name);
+		pr_debug("data file load failed\n");
 		return UCODE_NFOUND;
 	}
 
diff --color -Nru a/drivers/base/firmware_loader/fallback.c b/drivers/base/firmware_loader/fallback.c
--- a/drivers/base/firmware_loader/fallback.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/base/firmware_loader/fallback.c	2023-03-09 11:53:09.989441841 -0600
@@ -97,7 +97,7 @@
 	if (fw_priv->opt_flags & FW_OPT_UEVENT) {
 		fw_priv->need_uevent = true;
 		dev_set_uevent_suppress(f_dev, false);
-		dev_dbg(f_dev, "firmware: requesting %s\n", fw_priv->fw_name);
+		dev_dbg(f_dev, "firmware: requesting\n");
 		kobject_uevent(&fw_sysfs->dev.kobj, KOBJ_ADD);
 	} else {
 		timeout = MAX_JIFFY_OFFSET;
@@ -135,15 +135,13 @@
 	if (opt_flags & FW_OPT_NOWAIT) {
 		timeout = usermodehelper_read_lock_wait(timeout);
 		if (!timeout) {
-			dev_dbg(device, "firmware: %s loading timed out\n",
-				name);
+			dev_dbg(device, "firmware: loading timed out\n");
 			return -EBUSY;
 		}
 	} else {
 		ret = usermodehelper_read_trylock();
 		if (WARN_ON(ret)) {
-			dev_err(device, "firmware: %s will not be loaded\n",
-				name);
+			dev_err(device, "firmware: will not be loaded\n");
 			return ret;
 		}
 	}
@@ -226,10 +224,8 @@
 		return ret;
 
 	if (!(opt_flags & FW_OPT_NO_WARN))
-		dev_warn(device, "Falling back to sysfs fallback for: %s\n",
-				 name);
+		dev_warn(device, "Falling back to sysfs fallback\n");
 	else
-		dev_dbg(device, "Falling back to sysfs fallback for: %s\n",
-				name);
+		dev_dbg(device, "Falling back to sysfs fallback\n");
 	return fw_load_from_user_helper(fw, name, device, opt_flags);
 }
diff --color -Nru a/drivers/base/firmware_loader/main.c b/drivers/base/firmware_loader/main.c
--- a/drivers/base/firmware_loader/main.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/base/firmware_loader/main.c	2023-03-09 11:53:09.989441841 -0600
@@ -542,11 +542,10 @@
 						       READING_FIRMWARE);
 		if (rc < 0) {
 			if (rc != -ENOENT)
-				dev_warn(device, "loading %s failed with error %d\n",
-					 path, rc);
+				dev_warn(device, "loading failed with error %d\n",
+					 rc);
 			else
-				dev_dbg(device, "loading %s failed for no such file or directory.\n",
-					 path);
+				dev_dbg(device, "loading failed for no such file or directory.\n");
 			continue;
 		}
 		size = rc;
@@ -565,8 +564,7 @@
 				continue;
 			}
 		} else {
-			dev_dbg(device, "direct-loading %s\n",
-				fw_priv->fw_name);
+			dev_dbg(device, "direct-loading\n");
 			if (!fw_priv->data)
 				fw_priv->data = buffer;
 			fw_priv->size = size;
@@ -741,7 +739,7 @@
 	}
 
 	if (firmware_request_builtin_buf(firmware, name, dbuf, size)) {
-		dev_dbg(device, "using built-in %s\n", name);
+		dev_dbg(device, "using built-in\n");
 		return 0; /* assigned */
 	}
 
@@ -850,8 +848,8 @@
 	if (ret) {
 		if (!(opt_flags & FW_OPT_NO_WARN))
 			dev_warn(device,
-				 "Direct firmware load for %s failed with error %d\n",
-				 name, ret);
+				 "Direct firmware load for failed with error %d\n",
+				 ret);
 		if (nondirect)
 			ret = firmware_fallback_sysfs(fw, name, device,
 						      opt_flags, ret);
diff --color -Nru a/drivers/gpu/drm/amd/amdgpu/amdgpu_cgs.c b/drivers/gpu/drm/amd/amdgpu/amdgpu_cgs.c
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_cgs.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_cgs.c	2023-03-09 19:28:13.650922651 -0600
@@ -413,7 +413,7 @@ static int amdgpu_cgs_get_firmware_info(struct cgs_device *cgs_device,
 
 			err = amdgpu_ucode_request(adev, &adev->pm.fw, fw_name);
 			if (err) {
-				DRM_ERROR("Failed to load firmware \"%s\"", fw_name);
+				DRM_ERROR("Failed to load firmware\n");
 				amdgpu_ucode_release(&adev->pm.fw);
 				return err;
 			}
diff --color -Nru a/drivers/gpu/drm/amd/amdgpu/amdgpu_device.c b/drivers/gpu/drm/amd/amdgpu/amdgpu_device.c
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_device.c	2023-03-09 11:48:45.000000000 -0600
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_device.c	2023-03-09 19:29:28.335287765 -0600
@@ -2175,8 +2175,7 @@ static int amdgpu_device_parse_gpu_info_fw(struct amdgpu_device *adev)
 	err = amdgpu_ucode_request(adev, &adev->firmware.gpu_info_fw, fw_name);
 	if (err) {
 		dev_err(adev->dev,
-			"Failed to get gpu_info firmware \"%s\"\n",
-			fw_name);
+			"Failed to get gpu_info firmware\n");
 		goto out;
 	}
 
diff --color -Nru a/drivers/gpu/drm/amd/amdgpu/amdgpu_kms.c b/drivers/gpu/drm/amd/amdgpu/amdgpu_kms.c
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_kms.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_kms.c	2023-03-09 19:32:35.648203491 -0600
@@ -1500,8 +1500,8 @@
 		if (ret)
 			continue;
 
-		seq_printf(m, "TA %s feature version: 0x%08x, firmware version: 0x%08x\n",
-			   ta_fw_name[i], fw_info.feature, fw_info.ver);
+		seq_printf(m, "TA feature version: 0x%08x, firmware version: 0x%08x\n",
+			   fw_info.feature, fw_info.ver);
 	}
 
 	/* SMC */
diff --color -Nru a/drivers/gpu/drm/amd/amdgpu/amdgpu_psp.c b/drivers/gpu/drm/amd/amdgpu/amdgpu_psp.c
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_psp.c	2023-03-09 11:48:45.000000000 -0600
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_psp.c	2023-03-09 19:35:41.949114270 -0600
@@ -627,8 +627,7 @@
 	 */
 	if (!skip_unsupport && (psp->cmd_buf_mem->resp.status || !timeout) && !ras_intr) {
 		if (ucode)
-			DRM_WARN("failed to load ucode %s(0x%X) ",
-				  amdgpu_ucode_name(ucode->ucode_id), ucode->ucode_id);
+			DRM_WARN("failed to load ucode");
 		DRM_WARN("psp gfx command %s(0x%X) failed and response status is (0x%X)\n",
 			 psp_gfx_cmd_name(psp->cmd_buf_mem->cmd_id), psp->cmd_buf_mem->cmd_id,
 			 psp->cmd_buf_mem->resp.status);
diff --color -Nru a/drivers/gpu/drm/amd/amdgpu/amdgpu_uvd.c b/drivers/gpu/drm/amd/amdgpu/amdgpu_uvd.c
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_uvd.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_uvd.c	2023-03-09 19:38:05.801817530 -0600
@@ -262,8 +262,7 @@ int amdgpu_uvd_sw_init(struct amdgpu_device *adev)
 
 	r = amdgpu_ucode_request(adev, &adev->uvd.fw, fw_name);
 	if (r) {
-		dev_err(adev->dev, "amdgpu_uvd: Can't validate firmware \"%s\"\n",
-			fw_name);
+		dev_err(adev->dev, "amdgpu_uvd: Can't validate firmware\n");
 		amdgpu_ucode_release(&adev->uvd.fw);
 		return r;
 	}
diff --color -Nru a/drivers/gpu/drm/amd/amdgpu/amdgpu_vce.c b/drivers/gpu/drm/amd/amdgpu/amdgpu_vce.c
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_vce.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_vce.c	2023-03-09 19:40:03.778394288 -0600
@@ -160,8 +160,7 @@ int amdgpu_vce_sw_init(struct amdgpu_device *adev, unsigned long size)
 
 	r = amdgpu_ucode_request(adev, &adev->vce.fw, fw_name);
 	if (r) {
-		dev_err(adev->dev, "amdgpu_vce: Can't validate firmware \"%s\"\n",
-			fw_name);
+		dev_err(adev->dev, "amdgpu_vce: Can't validate firmware\n");
 		amdgpu_ucode_release(&adev->vce.fw);
 		return r;
 	}
#removed at v6.5 --ark74
#diff --color -Nru a/drivers/gpu/drm/amd/amdgpu/amdgpu_vcn.c b/drivers/gpu/drm/amd/amdgpu/amdgpu_vcn.c
#@@ -200,15 +200,13 @@
# 
# 	r = request_firmware(&adev->vcn.fw, fw_name, adev->dev);
# 	if (r) {
#-		dev_err(adev->dev, "amdgpu_vcn: Can't load firmware \"%s\"\n",
#-			fw_name);
#+		dev_err(adev->dev, "amdgpu_vcn: Can't load firmware\n");
# 		return r;
# 	}
# 
# 	r = amdgpu_ucode_validate(adev->vcn.fw);
# 	if (r) {
#-		dev_err(adev->dev, "amdgpu_vcn: Can't validate firmware \"%s\"\n",
#-			fw_name);
#+		dev_err(adev->dev, "amdgpu_vcn: Can't validate firmware\n");
# 		release_firmware(adev->vcn.fw);
# 		adev->vcn.fw = NULL;
# 		return r;
diff --color -Nru a/drivers/gpu/drm/amd/amdgpu/cik_sdma.c b/drivers/gpu/drm/amd/amdgpu/cik_sdma.c
--- a/drivers/gpu/drm/amd/amdgpu/cik_sdma.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/gpu/drm/amd/amdgpu/cik_sdma.c	2023-03-09 19:44:48.183784675 -0600
@@ -142,7 +142,7 @@ static int cik_sdma_init_microcode(struct amdgpu_device *adev)
 	}
 out:
 	if (err) {
-		pr_err("cik_sdma: Failed to load firmware \"%s\"\n", fw_name);
+		pr_err("cik_sdma: Failed to load firmware\n");
 		for (i = 0; i < adev->sdma.num_instances; i++)
 			amdgpu_ucode_release(&adev->sdma.instance[i].fw);
 	}
# Dropped on 6.8 --ark74
#diff --git a/drivers/gpu/drm/amd/amdgpu/gfx_v10_0.c b/drivers/gpu/drm/amd/amdgpu/gfx_v10_0.c
#index 49d34c7..376ccc3 100644
#--- a/drivers/gpu/drm/amd/amdgpu/gfx_v10_0.c
#+++ b/drivers/gpu/drm/amd/amdgpu/gfx_v10_0.c
#@@ -4011,8 +4011,7 @@ static int gfx_v10_0_init_microcode(struct amdgpu_device *adev)
# 			goto out;
# 		if (err)
# 			dev_dbg(adev->dev,
#-				"gfx10: amdgpu_ucode_request() failed \"%s\"\n",
#-				fw_name);
#+				"gfx10: amdgpu_ucode_request() failed \n");
# 		rlc_hdr = (const struct rlc_firmware_header_v2_0 *)adev->gfx.rlc_fw->data;
# 		version_major = le16_to_cpu(rlc_hdr->header.header_version_major);
# 		version_minor = le16_to_cpu(rlc_hdr->header.header_version_minor);
diff --color -Nru a/drivers/gpu/drm/amd/amdgpu/gfx_v6_0.c b/drivers/gpu/drm/amd/amdgpu/gfx_v6_0.c
--- a/drivers/gpu/drm/amd/amdgpu/gfx_v6_0.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/gpu/drm/amd/amdgpu/gfx_v6_0.c	2023-03-09 19:48:18.700813841 -0600
@@ -371,7 +371,7 @@ static int gfx_v6_0_init_microcode(struct amdgpu_device *adev)
 
 out:
 	if (err) {
-		pr_err("gfx6: Failed to load firmware \"%s\"\n", fw_name);
+		pr_err("gfx6: Failed to load firmware\n");
 		amdgpu_ucode_release(&adev->gfx.pfp_fw);
 		amdgpu_ucode_release(&adev->gfx.me_fw);
 		amdgpu_ucode_release(&adev->gfx.ce_fw);
diff --color -Nru a/drivers/gpu/drm/amd/amdgpu/gfx_v7_0.c b/drivers/gpu/drm/amd/amdgpu/gfx_v7_0.c
--- a/drivers/gpu/drm/amd/amdgpu/gfx_v7_0.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/gpu/drm/amd/amdgpu/gfx_v7_0.c	2023-03-09 19:49:39.717209910 -0600
@@ -969,7 +969,7 @@ static int gfx_v7_0_init_microcode(struct amdgpu_device *adev)
 		goto out;
 out:
 	if (err) {
-		pr_err("gfx7: Failed to load firmware \"%s\"\n", fw_name);
+		pr_err("gfx7: Failed to load firmware\n");
 		gfx_v7_0_free_microcode(adev);
 	}
 	return err;
diff --color -Nru a/drivers/gpu/drm/amd/amdgpu/gfx_v8_0.c b/drivers/gpu/drm/amd/amdgpu/gfx_v8_0.c
--- a/drivers/gpu/drm/amd/amdgpu/gfx_v8_0.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/gpu/drm/amd/amdgpu/gfx_v8_0.c	2023-03-09 19:52:22.738006878 -0600
@@ -1195,8 +1195,7 @@ static int gfx_v8_0_init_microcode(struct amdgpu_device *adev)
 out:
 	if (err) {
 		dev_err(adev->dev,
-			"gfx8: Failed to load firmware \"%s\"\n",
-			fw_name);
+			"gfx8: Failed to load firmware\n");
 		amdgpu_ucode_release(&adev->gfx.pfp_fw);
 		amdgpu_ucode_release(&adev->gfx.me_fw);
 		amdgpu_ucode_release(&adev->gfx.ce_fw);
#removed at v6.5 --ark74
#diff --color -Nru a/drivers/gpu/drm/amd/amdgpu/gfx_v9_0.c b/drivers/gpu/drm/amd/amdgpu/gfx_v9_0.c
#@@ -1334,8 +1334,7 @@
# out:
# 	if (err) {
# 		dev_err(adev->dev,
#-			"gfx9: Failed to init firmware \"%s\"\n",
#-			fw_name);
#+			"gfx9: Failed to load firmware\n");
# 		release_firmware(adev->gfx.pfp_fw);
# 		adev->gfx.pfp_fw = NULL;
# 		release_firmware(adev->gfx.me_fw);
#@@ -1469,8 +1468,7 @@
# out:
# 	if (err) {
# 		dev_err(adev->dev,
#-			"gfx9: Failed to init firmware \"%s\"\n",
#-			fw_name);
#+			"gfx9: Failed to load firmware\n");
# 		release_firmware(adev->gfx.rlc_fw);
# 		adev->gfx.rlc_fw = NULL;
# 	}
#@@ -1572,8 +1570,7 @@
# 	gfx_v9_0_check_fw_write_wait(adev);
# 	if (err) {
# 		dev_err(adev->dev,
#-			"gfx9: Failed to init firmware \"%s\"\n",
#-			fw_name);
#+			"gfx9: Failed to load firmware\n");
# 		release_firmware(adev->gfx.mec_fw);
# 		adev->gfx.mec_fw = NULL;
# 		release_firmware(adev->gfx.mec2_fw);
diff --color -Nru a/drivers/gpu/drm/amd/amdgpu/gmc_v6_0.c b/drivers/gpu/drm/amd/amdgpu/gmc_v6_0.c
--- a/drivers/gpu/drm/amd/amdgpu/gmc_v6_0.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/gpu/drm/amd/amdgpu/gmc_v6_0.c	2023-03-09 19:58:54.279921029 -0600
@@ -134,8 +134,7 @@ static int gmc_v6_0_init_microcode(struct amdgpu_device *adev)
 	err = amdgpu_ucode_request(adev, &adev->gmc.fw, fw_name);
 	if (err) {
 		dev_err(adev->dev,
-		       "si_mc: Failed to load firmware \"%s\"\n",
-		       fw_name);
+		       "si_mc: Failed to load firmware\n");
 		amdgpu_ucode_release(&adev->gmc.fw);
 	}
 	return err;
diff --color -Nru a/drivers/gpu/drm/amd/amdgpu/gmc_v7_0.c b/drivers/gpu/drm/amd/amdgpu/gmc_v7_0.c
--- a/drivers/gpu/drm/amd/amdgpu/gmc_v7_0.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/gpu/drm/amd/amdgpu/gmc_v7_0.c	2023-03-09 20:00:00.496244744 -0600
@@ -158,7 +158,7 @@ static int gmc_v7_0_init_microcode(struct amdgpu_device *adev)
 
 	err = amdgpu_ucode_request(adev, &adev->gmc.fw, fw_name);
 	if (err) {
-		pr_err("cik_mc: Failed to load firmware \"%s\"\n", fw_name);
+		pr_err("cik_mc: Failed to load firmware\n");
 		amdgpu_ucode_release(&adev->gmc.fw);
 	}
 	return err;
diff --color -Nru a/drivers/gpu/drm/amd/amdgpu/gmc_v8_0.c b/drivers/gpu/drm/amd/amdgpu/gmc_v8_0.c
--- a/drivers/gpu/drm/amd/amdgpu/gmc_v8_0.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/gpu/drm/amd/amdgpu/gmc_v8_0.c	2023-03-09 20:01:46.768764284 -0600
@@ -266,7 +266,7 @@ static int gmc_v8_0_init_microcode(struct amdgpu_device *adev)
 	snprintf(fw_name, sizeof(fw_name), "amdgpu/%s_mc.bin", chip_name);
 	err = amdgpu_ucode_request(adev, &adev->gmc.fw, fw_name);
 	if (err) {
-		pr_err("mc: Failed to load firmware \"%s\"\n", fw_name);
+		pr_err("mc: Failed to load firmware\n");
 		amdgpu_ucode_release(&adev->gmc.fw);
 	}
 	return err;
#removed at v6.5 --ark74
#diff --color -Nru a/drivers/gpu/drm/amd/amdgpu/psp_v10_0.c b/drivers/gpu/drm/amd/amdgpu/psp_v10_0.c
#@@ -75,8 +75,7 @@
# 		release_firmware(adev->psp.ta_fw);
# 		adev->psp.ta_fw = NULL;
# 		dev_info(adev->dev,
#-			 "psp v10.0: Failed to load firmware \"%s\"\n",
#-			 fw_name);
#+			 "psp v10.0: Failed to load firmware\n");
# 	} else {
# 		err = amdgpu_ucode_validate(adev->psp.ta_fw);
# 		if (err)
#@@ -119,8 +118,7 @@
# out:
# 	if (err) {
# 		dev_err(adev->dev,
#-			"psp v10.0: Failed to load firmware \"%s\"\n",
#-			fw_name);
#+			"psp v10.0: Failed to load firmware\n");
# 	}
# 
# 	return err;
#diff --color -Nru a/drivers/gpu/drm/amd/amdgpu/psp_v11_0.c b/drivers/gpu/drm/amd/amdgpu/psp_v11_0.c
#@@ -146,7 +146,7 @@
# 			release_firmware(adev->psp.ta_fw);
# 			adev->psp.ta_fw = NULL;
# 			dev_info(adev->dev,
#-				 "psp v11.0: Failed to load firmware \"%s\"\n", fw_name);
#+				 "psp v11.0: Failed to load firmware\n");
# 		} else {
# 			err = amdgpu_ucode_validate(adev->psp.ta_fw);
# 			if (err)
#@@ -185,7 +185,7 @@
# 			release_firmware(adev->psp.ta_fw);
# 			adev->psp.ta_fw = NULL;
# 			dev_info(adev->dev,
#-				 "psp v11.0: Failed to load firmware \"%s\"\n", fw_name);
#+				 "psp v11.0: Failed to load firmware\n");
# 		} else {
# 			err = amdgpu_ucode_validate(adev->psp.ta_fw);
# 			if (err)
#diff --color -Nru a/drivers/gpu/drm/amd/amdgpu/psp_v12_0.c b/drivers/gpu/drm/amd/amdgpu/psp_v12_0.c
#@@ -75,8 +75,7 @@
# 		release_firmware(adev->psp.ta_fw);
# 		adev->psp.ta_fw = NULL;
# 		dev_info(adev->dev,
#-			 "psp v12.0: Failed to load firmware \"%s\"\n",
#-			 fw_name);
#+			 "psp v12.0: Failed to load firmware\n");
# 	} else {
# 		err = amdgpu_ucode_validate(adev->psp.ta_fw);
# 		if (err)
#@@ -120,8 +119,7 @@
# 	adev->psp.ta_fw = NULL;
# 	if (err) {
# 		dev_err(adev->dev,
#-			"psp v12.0: Failed to load firmware \"%s\"\n",
#-			fw_name);
#+			"psp v12.0: Failed to load firmware\n");
# 	}
# 
# 	return err;
diff --color -Nru a/drivers/gpu/drm/amd/amdgpu/sdma_v2_4.c b/drivers/gpu/drm/amd/amdgpu/sdma_v2_4.c
--- a/drivers/gpu/drm/amd/amdgpu/sdma_v2_4.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/gpu/drm/amd/amdgpu/sdma_v2_4.c	2023-03-09 20:16:41.561138701 -0600
@@ -171,7 +171,7 @@ static int sdma_v2_4_init_microcode(struct amdgpu_device *adev)
 
 out:
 	if (err) {
-		pr_err("sdma_v2_4: Failed to load firmware \"%s\"\n", fw_name);
+		pr_err("sdma_v2_4: Failed to load firmware\n");
 		for (i = 0; i < adev->sdma.num_instances; i++)
 			amdgpu_ucode_release(&adev->sdma.instance[i].fw);
 	}
diff --color -Nru a/drivers/gpu/drm/amd/amdgpu/sdma_v3_0.c b/drivers/gpu/drm/amd/amdgpu/sdma_v3_0.c
--- a/drivers/gpu/drm/amd/amdgpu/sdma_v3_0.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/gpu/drm/amd/amdgpu/sdma_v3_0.c	2023-03-09 20:17:54.125493450 -0600
@@ -327,7 +327,7 @@ static int sdma_v3_0_init_microcode(struct amdgpu_device *adev)
 	}
 out:
 	if (err) {
-		pr_err("sdma_v3_0: Failed to load firmware \"%s\"\n", fw_name);
+		pr_err("sdma_v3_0: Failed to load firmware\n");
 		for (i = 0; i < adev->sdma.num_instances; i++)
 			amdgpu_ucode_release(&adev->sdma.instance[i].fw);
 	}
#removed at v6.2 --ark74
#diff --color -Nru a/drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c b/drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c
#@@ -704,7 +704,7 @@
# 
# out:
# 	if (err) {
#-		DRM_ERROR("sdma_v4_0: Failed to load firmware \"%s\"\n", fw_name);
#+		DRM_ERROR("sdma_v4_0: Failed to load firmware\n");
# 		sdma_v4_0_destroy_inst_ctx(adev);
# 	}
# 	return err;
#diff --color -Nru a/drivers/gpu/drm/amd/amdgpu/sdma_v5_0.c b/drivers/gpu/drm/amd/amdgpu/sdma_v5_0.c
#@@ -297,7 +297,7 @@
# 	}
# out:
# 	if (err) {
#-		DRM_ERROR("sdma_v5_0: Failed to load firmware \"%s\"\n", fw_name);
#+		DRM_ERROR("sdma_v5_0: Failed to load firmware\n");
# 		for (i = 0; i < adev->sdma.num_instances; i++) {
# 			release_firmware(adev->sdma.instance[i].fw);
# 			adev->sdma.instance[i].fw = NULL;
#diff --color -Nru a/drivers/gpu/drm/amd/amdgpu/sdma_v5_2.c b/drivers/gpu/drm/amd/amdgpu/sdma_v5_2.c
#@@ -201,7 +201,7 @@
# 
# out:
# 	if (err) {
#-		DRM_ERROR("sdma_v5_2: Failed to load firmware \"%s\"\n", fw_name);
#+		DRM_ERROR("sdma_v5_2: Failed to load firmware\n");
# 		sdma_v5_2_destroy_inst_ctx(adev);
# 	}
# 	return err;
diff --color -Nru a/drivers/gpu/drm/amd/pm/legacy-dpm/si_dpm.c b/drivers/gpu/drm/amd/pm/legacy-dpm/si_dpm.c
--- a/drivers/gpu/drm/amd/pm/legacy-dpm/si_dpm.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/gpu/drm/amd/pm/legacy-dpm/si_dpm.c	2023-03-09 11:53:09.993441860 -0600
@@ -7687,8 +7687,8 @@ static int si_dpm_init_microcode(struct amdgpu_device *adev)
 	snprintf(fw_name, sizeof(fw_name), "amdgpu/%s_smc.bin", chip_name);
 	err = amdgpu_ucode_request(adev, &adev->pm.fw, fw_name);
 	if (err) {
-		DRM_ERROR("si_smc: Failed to load firmware. err = %d\"%s\"\n",
-			  err, fw_name);
+		DRM_ERROR("si_smc: Failed to load firmware. err = %d\n",
+			  err);
 		amdgpu_ucode_release(&adev->pm.fw);
 	}
 	return err;
diff --git a/drivers/gpu/drm/drm_edid_load.c b/drivers/gpu/drm/drm_edid_load.c
index 5d9ef26..116fa00 100644
--- a/drivers/gpu/drm/drm_edid_load.c
+++ b/drivers/gpu/drm/drm_edid_load.c
@@ -177,9 +177,8 @@ static const struct drm_edid *edid_load(struct drm_connector *connector, const c
 		err = request_firmware(&fw, name, connector->dev->dev);
 		if (err) {
 			drm_err(connector->dev,
-				"[CONNECTOR:%d:%s] Requesting EDID firmware \"%s\" failed (err=%d)\n",
-				connector->base.id, connector->name,
-				name, err);
+				"Requesting EDID firmware failed (err=%d)\n",
+				err);
 			return ERR_PTR(err);
 		}
 
@@ -187,13 +186,13 @@ static const struct drm_edid *edid_load(struct drm_connector *connector, const c
 		fwsize = fw->size;
 	}
 
-	drm_dbg_kms(connector->dev, "[CONNECTOR:%d:%s] Loaded %s firmware EDID \"%s\"\n",
+	drm_dbg_kms(connector->dev, "[CONNECTOR:%d:%s] Loaded %s firmware EDID\n",
 		    connector->base.id, connector->name,
-		    builtin >= 0 ? "built-in" : "external", name);
+		    builtin >= 0 ? "built-in" : "external");
 
 	drm_edid = drm_edid_alloc(fwdata, fwsize);
 	if (!drm_edid_valid(drm_edid)) {
-		drm_err(connector->dev, "Invalid firmware EDID \"%s\"\n", name);
+		drm_err(connector->dev, "Invalid firmware EDID \n");
 		drm_edid_free(drm_edid);
 		drm_edid = ERR_PTR(-EINVAL);
 	}
#removed at 6.5 --ark74
#diff --color -Nru a/drivers/gpu/drm/r128/r128_cce.c b/drivers/gpu/drm/r128/r128_cce.c
#--- a/drivers/gpu/drm/r128/r128_cce.c	2022-07-31 16:03:01.000000000 -0500
#+++ b/drivers/gpu/drm/r128/r128_cce.c	2023-03-09 16:40:53.689839779 -0600
#@@ -162,14 +162,13 @@
# 	rc = request_firmware(&fw, FIRMWARE_NAME, &pdev->dev);
# 	platform_device_unregister(pdev);
# 	if (rc) {
#-		pr_err("r128_cce: Failed to load firmware \"%s\"\n",
#-		       FIRMWARE_NAME);
#+		pr_err("r128_cce: Failed to load firmware\n");
# 		return rc;
# 	}
# 
# 	if (fw->size != 256 * 8) {
#-		pr_err("r128_cce: Bogus length %zu in firmware \"%s\"\n",
#-		       fw->size, FIRMWARE_NAME);
#+		pr_err("r128_cce: Bogus length %zu in firmware\n",
#+		       fw->size);
# 		rc = -EINVAL;
# 		goto out_release;
# 	}
diff --color -Nru a/drivers/gpu/drm/radeon/cik.c b/drivers/gpu/drm/radeon/cik.c
--- a/drivers/gpu/drm/radeon/cik.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/gpu/drm/radeon/cik.c	2023-03-09 18:09:31.511837288 -0600
@@ -2049,7 +2049,7 @@
 	default: BUG();
 	}
 
-	DRM_INFO("Loading %s Microcode\n", new_chip_name);
+	DRM_INFO("Loading Microcode\n");
 
 	snprintf(fw_name, sizeof(fw_name), "radeon/%s_pfp.bin", new_chip_name);
 	err = request_firmware(&rdev->pfp_fw, fw_name, rdev->dev);
@@ -2059,16 +2059,15 @@
 		if (err)
 			goto out;
 		if (rdev->pfp_fw->size != pfp_req_size) {
-			pr_err("cik_cp: Bogus length %zu in firmware \"%s\"\n",
-			       rdev->pfp_fw->size, fw_name);
+			pr_err("cik_cp: Bogus length %zu in firmware\n",
+			       rdev->pfp_fw->size);
 			err = -EINVAL;
 			goto out;
 		}
 	} else {
 		err = radeon_ucode_validate(rdev->pfp_fw);
 		if (err) {
-			pr_err("cik_fw: validation failed for firmware \"%s\"\n",
-			       fw_name);
+			pr_err("cik_fw: validation failed for firmware\n");
 			goto out;
 		} else {
 			new_fw++;
@@ -2083,15 +2082,14 @@
 		if (err)
 			goto out;
 		if (rdev->me_fw->size != me_req_size) {
-			pr_err("cik_cp: Bogus length %zu in firmware \"%s\"\n",
-			       rdev->me_fw->size, fw_name);
+			pr_err("cik_cp: Bogus length %zu in firmware\n",
+			       rdev->me_fw->size);
 			err = -EINVAL;
 		}
 	} else {
 		err = radeon_ucode_validate(rdev->me_fw);
 		if (err) {
-			pr_err("cik_fw: validation failed for firmware \"%s\"\n",
-			       fw_name);
+			pr_err("cik_fw: validation failed for firmware\n");
 			goto out;
 		} else {
 			new_fw++;
@@ -2106,15 +2104,14 @@
 		if (err)
 			goto out;
 		if (rdev->ce_fw->size != ce_req_size) {
-			pr_err("cik_cp: Bogus length %zu in firmware \"%s\"\n",
-			       rdev->ce_fw->size, fw_name);
+			pr_err("cik_cp: Bogus length %zu in firmware\n",
+			       rdev->ce_fw->size);
 			err = -EINVAL;
 		}
 	} else {
 		err = radeon_ucode_validate(rdev->ce_fw);
 		if (err) {
-			pr_err("cik_fw: validation failed for firmware \"%s\"\n",
-			       fw_name);
+			pr_err("cik_fw: validation failed for firmware\n");
 			goto out;
 		} else {
 			new_fw++;
@@ -2129,15 +2126,14 @@
 		if (err)
 			goto out;
 		if (rdev->mec_fw->size != mec_req_size) {
-			pr_err("cik_cp: Bogus length %zu in firmware \"%s\"\n",
-			       rdev->mec_fw->size, fw_name);
+			pr_err("cik_cp: Bogus length %zu in firmware\n",
+			       rdev->mec_fw->size);
 			err = -EINVAL;
 		}
 	} else {
 		err = radeon_ucode_validate(rdev->mec_fw);
 		if (err) {
-			pr_err("cik_fw: validation failed for firmware \"%s\"\n",
-			       fw_name);
+			pr_err("cik_fw: validation failed for firmware\n");
 			goto out;
 		} else {
 			new_fw++;
@@ -2167,15 +2163,14 @@
 		if (err)
 			goto out;
 		if (rdev->rlc_fw->size != rlc_req_size) {
-			pr_err("cik_rlc: Bogus length %zu in firmware \"%s\"\n",
-			       rdev->rlc_fw->size, fw_name);
+			pr_err("cik_rlc: Bogus length %zu in firmware\n",
+			       rdev->rlc_fw->size);
 			err = -EINVAL;
 		}
 	} else {
 		err = radeon_ucode_validate(rdev->rlc_fw);
 		if (err) {
-			pr_err("cik_fw: validation failed for firmware \"%s\"\n",
-			       fw_name);
+			pr_err("cik_fw: validation failed for firmware\n");
 			goto out;
 		} else {
 			new_fw++;
@@ -2190,15 +2185,14 @@
 		if (err)
 			goto out;
 		if (rdev->sdma_fw->size != sdma_req_size) {
-			pr_err("cik_sdma: Bogus length %zu in firmware \"%s\"\n",
-			       rdev->sdma_fw->size, fw_name);
+			pr_err("cik_sdma: Bogus length %zu in firmware\n",
+			       rdev->sdma_fw->size);
 			err = -EINVAL;
 		}
 	} else {
 		err = radeon_ucode_validate(rdev->sdma_fw);
 		if (err) {
-			pr_err("cik_fw: validation failed for firmware \"%s\"\n",
-			       fw_name);
+			pr_err("cik_fw: validation failed for firmware\n");
 			goto out;
 		} else {
 			new_fw++;
@@ -2220,16 +2214,15 @@
 			}
 			if ((rdev->mc_fw->size != mc_req_size) &&
 			    (rdev->mc_fw->size != mc2_req_size)){
-				pr_err("cik_mc: Bogus length %zu in firmware \"%s\"\n",
-				       rdev->mc_fw->size, fw_name);
+				pr_err("cik_mc: Bogus length %zu in firmware\n",
+				       rdev->mc_fw->size);
 				err = -EINVAL;
 			}
 			DRM_INFO("%s: %zu bytes\n", fw_name, rdev->mc_fw->size);
 		} else {
 			err = radeon_ucode_validate(rdev->mc_fw);
 			if (err) {
-				pr_err("cik_fw: validation failed for firmware \"%s\"\n",
-				       fw_name);
+				pr_err("cik_fw: validation failed for firmware\n");
 				goto out;
 			} else {
 				new_fw++;
@@ -2251,15 +2244,14 @@
 				rdev->smc_fw = NULL;
 				err = 0;
 			} else if (rdev->smc_fw->size != smc_req_size) {
-				pr_err("cik_smc: Bogus length %zu in firmware \"%s\"\n",
-				       rdev->smc_fw->size, fw_name);
+				pr_err("cik_smc: Bogus length %zu in firmware\n",
+				       rdev->smc_fw->size);
 				err = -EINVAL;
 			}
 		} else {
 			err = radeon_ucode_validate(rdev->smc_fw);
 			if (err) {
-				pr_err("cik_fw: validation failed for firmware \"%s\"\n",
-				       fw_name);
+				pr_err("cik_fw: validation failed for firmware\n");
 				goto out;
 			} else {
 				new_fw++;
@@ -2279,8 +2271,7 @@
 out:
 	if (err) {
 		if (err != -EINVAL)
-			pr_err("cik_cp: Failed to load firmware \"%s\"\n",
-			       fw_name);
+			pr_err("cik_cp: Failed to load firmware\n");
 		release_firmware(rdev->pfp_fw);
 		rdev->pfp_fw = NULL;
 		release_firmware(rdev->me_fw);
diff --color -Nru a/drivers/gpu/drm/radeon/ni.c b/drivers/gpu/drm/radeon/ni.c
--- a/drivers/gpu/drm/radeon/ni.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/gpu/drm/radeon/ni.c	2023-03-09 11:53:09.993441860 -0600
@@ -807,7 +807,7 @@
 		snprintf(fw_name, sizeof(fw_name), "radeon/%s_smc.bin", chip_name);
 		err = request_firmware(&rdev->smc_fw, fw_name, rdev->dev);
 		if (err) {
-			pr_err("smc: error loading firmware \"%s\"\n", fw_name);
+			pr_err("smc: error loading firmware\n");
 			release_firmware(rdev->smc_fw);
 			rdev->smc_fw = NULL;
 			err = 0;
@@ -821,8 +821,7 @@
 out:
 	if (err) {
 		if (err != -EINVAL)
-			pr_err("ni_cp: Failed to load firmware \"%s\"\n",
-			       fw_name);
+			pr_err("ni_cp: Failed to load firmware\n");
 		release_firmware(rdev->pfp_fw);
 		rdev->pfp_fw = NULL;
 		release_firmware(rdev->me_fw);
diff --color -Nru a/drivers/gpu/drm/radeon/r100.c b/drivers/gpu/drm/radeon/r100.c
--- a/drivers/gpu/drm/radeon/r100.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/gpu/drm/radeon/r100.c	2023-03-09 11:53:09.993441860 -0600
@@ -1017,13 +1017,13 @@
 	if ((rdev->family == CHIP_R100) || (rdev->family == CHIP_RV100) ||
 	    (rdev->family == CHIP_RV200) || (rdev->family == CHIP_RS100) ||
 	    (rdev->family == CHIP_RS200)) {
-		DRM_INFO("Loading R100 Microcode\n");
+		DRM_INFO("Loading Microcode\n");
 		fw_name = FIRMWARE_R100;
 	} else if ((rdev->family == CHIP_R200) ||
 		   (rdev->family == CHIP_RV250) ||
 		   (rdev->family == CHIP_RV280) ||
 		   (rdev->family == CHIP_RS300)) {
-		DRM_INFO("Loading R200 Microcode\n");
+		DRM_INFO("Loading Microcode\n");
 		fw_name = FIRMWARE_R200;
 	} else if ((rdev->family == CHIP_R300) ||
 		   (rdev->family == CHIP_R350) ||
@@ -1031,19 +1031,19 @@
 		   (rdev->family == CHIP_RV380) ||
 		   (rdev->family == CHIP_RS400) ||
 		   (rdev->family == CHIP_RS480)) {
-		DRM_INFO("Loading R300 Microcode\n");
+		DRM_INFO("Loading Microcode\n");
 		fw_name = FIRMWARE_R300;
 	} else if ((rdev->family == CHIP_R420) ||
 		   (rdev->family == CHIP_R423) ||
 		   (rdev->family == CHIP_RV410)) {
-		DRM_INFO("Loading R400 Microcode\n");
+		DRM_INFO("Loading Microcode\n");
 		fw_name = FIRMWARE_R420;
 	} else if ((rdev->family == CHIP_RS690) ||
 		   (rdev->family == CHIP_RS740)) {
-		DRM_INFO("Loading RS690/RS740 Microcode\n");
+		DRM_INFO("Loading Microcode\n");
 		fw_name = FIRMWARE_RS690;
 	} else if (rdev->family == CHIP_RS600) {
-		DRM_INFO("Loading RS600 Microcode\n");
+		DRM_INFO("Loading Microcode\n");
 		fw_name = FIRMWARE_RS600;
 	} else if ((rdev->family == CHIP_RV515) ||
 		   (rdev->family == CHIP_R520) ||
@@ -1051,16 +1051,16 @@
 		   (rdev->family == CHIP_R580) ||
 		   (rdev->family == CHIP_RV560) ||
 		   (rdev->family == CHIP_RV570)) {
-		DRM_INFO("Loading R500 Microcode\n");
+		DRM_INFO("Loading Microcode\n");
 		fw_name = FIRMWARE_R520;
 	}
 
 	err = request_firmware(&rdev->me_fw, fw_name, rdev->dev);
 	if (err) {
-		pr_err("radeon_cp: Failed to load firmware \"%s\"\n", fw_name);
+		pr_err("radeon_cp: Failed to load firmware\n");
 	} else if (rdev->me_fw->size % 8) {
-		pr_err("radeon_cp: Bogus length %zu in firmware \"%s\"\n",
-		       rdev->me_fw->size, fw_name);
+		pr_err("radeon_cp: Bogus length %zu in firmware\n",
+		       rdev->me_fw->size);
 		err = -EINVAL;
 		release_firmware(rdev->me_fw);
 		rdev->me_fw = NULL;
diff --color -Nru a/drivers/gpu/drm/radeon/r600.c b/drivers/gpu/drm/radeon/r600.c
--- a/drivers/gpu/drm/radeon/r600.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/gpu/drm/radeon/r600.c	2023-03-09 11:53:09.993441860 -0600
@@ -2548,15 +2548,15 @@
 		rlc_req_size = R600_RLC_UCODE_SIZE * 4;
 	}
 
-	DRM_INFO("Loading %s Microcode\n", chip_name);
+	DRM_INFO("Loading Microcode\n");
 
 	snprintf(fw_name, sizeof(fw_name), "radeon/%s_pfp.bin", chip_name);
 	err = request_firmware(&rdev->pfp_fw, fw_name, rdev->dev);
 	if (err)
 		goto out;
 	if (rdev->pfp_fw->size != pfp_req_size) {
-		pr_err("r600_cp: Bogus length %zu in firmware \"%s\"\n",
-		       rdev->pfp_fw->size, fw_name);
+		pr_err("r600_cp: Bogus length %zu in firmware\n",
+		       rdev->pfp_fw->size);
 		err = -EINVAL;
 		goto out;
 	}
@@ -2566,8 +2566,8 @@
 	if (err)
 		goto out;
 	if (rdev->me_fw->size != me_req_size) {
-		pr_err("r600_cp: Bogus length %zu in firmware \"%s\"\n",
-		       rdev->me_fw->size, fw_name);
+		pr_err("r600_cp: Bogus length %zu in firmware\n",
+		       rdev->me_fw->size);
 		err = -EINVAL;
 		goto out;
 	}
@@ -2577,8 +2577,8 @@
 	if (err)
 		goto out;
 	if (rdev->rlc_fw->size != rlc_req_size) {
-		pr_err("r600_rlc: Bogus length %zu in firmware \"%s\"\n",
-		       rdev->rlc_fw->size, fw_name);
+		pr_err("r600_rlc: Bogus length %zu in firmware\n",
+		       rdev->rlc_fw->size);
 		err = -EINVAL;
 		goto out;
 	}
@@ -2587,13 +2587,13 @@
 		snprintf(fw_name, sizeof(fw_name), "radeon/%s_smc.bin", smc_chip_name);
 		err = request_firmware(&rdev->smc_fw, fw_name, rdev->dev);
 		if (err) {
-			pr_err("smc: error loading firmware \"%s\"\n", fw_name);
+			pr_err("smc: error loading firmware\n");
 			release_firmware(rdev->smc_fw);
 			rdev->smc_fw = NULL;
 			err = 0;
 		} else if (rdev->smc_fw->size != smc_req_size) {
-			pr_err("smc: Bogus length %zu in firmware \"%s\"\n",
-			       rdev->smc_fw->size, fw_name);
+			pr_err("smc: Bogus length %zu in firmware\n",
+			       rdev->smc_fw->size);
 			err = -EINVAL;
 		}
 	}
@@ -2601,8 +2601,7 @@
 out:
 	if (err) {
 		if (err != -EINVAL)
-			pr_err("r600_cp: Failed to load firmware \"%s\"\n",
-			       fw_name);
+			pr_err("r600_cp: Failed to load firmware\n");
 		release_firmware(rdev->pfp_fw);
 		rdev->pfp_fw = NULL;
 		release_firmware(rdev->me_fw);
diff --color -Nru a/drivers/gpu/drm/radeon/radeon_uvd.c b/drivers/gpu/drm/radeon/radeon_uvd.c
--- a/drivers/gpu/drm/radeon/radeon_uvd.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/gpu/drm/radeon/radeon_uvd.c	2023-03-09 11:53:09.993441860 -0600
@@ -140,8 +140,7 @@
 		/* Let's try to load the newer firmware first */
 		r = request_firmware(&rdev->uvd_fw, fw_name, rdev->dev);
 		if (r) {
-			dev_err(rdev->dev, "radeon_uvd: Can't load firmware \"%s\"\n",
-				fw_name);
+			dev_err(rdev->dev, "radeon_uvd: Can't load firmware\n");
 		} else {
 			struct common_firmware_header *hdr = (void *)rdev->uvd_fw->data;
 			unsigned version_major, version_minor, family_id;
@@ -177,8 +176,7 @@
 	if (!fw_name || r) {
 		r = request_firmware(&rdev->uvd_fw, legacy_fw_name, rdev->dev);
 		if (r) {
-			dev_err(rdev->dev, "radeon_uvd: Can't load firmware \"%s\"\n",
-				legacy_fw_name);
+			dev_err(rdev->dev, "radeon_uvd: Can't load firmware\n");
 			return r;
 		}
 	}
diff --color -Nru a/drivers/gpu/drm/radeon/radeon_vce.c b/drivers/gpu/drm/radeon/radeon_vce.c
--- a/drivers/gpu/drm/radeon/radeon_vce.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/gpu/drm/radeon/radeon_vce.c	2023-03-09 11:53:09.993441860 -0600
@@ -86,8 +86,7 @@
 
 	r = request_firmware(&rdev->vce_fw, fw_name, rdev->dev);
 	if (r) {
-		dev_err(rdev->dev, "radeon_vce: Can't load firmware \"%s\"\n",
-			fw_name);
+		dev_err(rdev->dev, "radeon_vce: Can't load firmware\n");
 		return r;
 	}
 
diff --color -Nru a/drivers/gpu/drm/radeon/si.c b/drivers/gpu/drm/radeon/si.c
--- a/drivers/gpu/drm/radeon/si.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/gpu/drm/radeon/si.c	2023-03-09 11:53:09.993441860 -0600
@@ -1775,7 +1775,7 @@
 	if (((RREG32(MC_SEQ_MISC0) & 0xff000000) >> 24) == 0x58)
 		si58_fw = true;
 
-	DRM_INFO("Loading %s Microcode\n", new_chip_name);
+	DRM_INFO("Loading Microcode\n");
 
 	snprintf(fw_name, sizeof(fw_name), "radeon/%s_pfp.bin", new_chip_name);
 	err = request_firmware(&rdev->pfp_fw, fw_name, rdev->dev);
@@ -1785,16 +1785,15 @@
 		if (err)
 			goto out;
 		if (rdev->pfp_fw->size != pfp_req_size) {
-			pr_err("si_cp: Bogus length %zu in firmware \"%s\"\n",
-			       rdev->pfp_fw->size, fw_name);
+			pr_err("si_cp: Bogus length %zu in firmware\n",
+			       rdev->pfp_fw->size);
 			err = -EINVAL;
 			goto out;
 		}
 	} else {
 		err = radeon_ucode_validate(rdev->pfp_fw);
 		if (err) {
-			pr_err("si_cp: validation failed for firmware \"%s\"\n",
-			       fw_name);
+			pr_err("si_cp: validation failed for firmware\n");
 			goto out;
 		} else {
 			new_fw++;
@@ -1809,15 +1808,14 @@
 		if (err)
 			goto out;
 		if (rdev->me_fw->size != me_req_size) {
-			pr_err("si_cp: Bogus length %zu in firmware \"%s\"\n",
-			       rdev->me_fw->size, fw_name);
+			pr_err("si_cp: Bogus length %zu in firmware\n",
+			       rdev->me_fw->size);
 			err = -EINVAL;
 		}
 	} else {
 		err = radeon_ucode_validate(rdev->me_fw);
 		if (err) {
-			pr_err("si_cp: validation failed for firmware \"%s\"\n",
-			       fw_name);
+			pr_err("si_cp: validation failed for firmware\n");
 			goto out;
 		} else {
 			new_fw++;
@@ -1832,15 +1830,14 @@
 		if (err)
 			goto out;
 		if (rdev->ce_fw->size != ce_req_size) {
-			pr_err("si_cp: Bogus length %zu in firmware \"%s\"\n",
-			       rdev->ce_fw->size, fw_name);
+			pr_err("si_cp: Bogus length %zu in firmware\n",
+			       rdev->ce_fw->size);
 			err = -EINVAL;
 		}
 	} else {
 		err = radeon_ucode_validate(rdev->ce_fw);
 		if (err) {
-			pr_err("si_cp: validation failed for firmware \"%s\"\n",
-			       fw_name);
+			pr_err("si_cp: validation failed for firmware\n");
 			goto out;
 		} else {
 			new_fw++;
@@ -1855,15 +1852,14 @@
 		if (err)
 			goto out;
 		if (rdev->rlc_fw->size != rlc_req_size) {
-			pr_err("si_rlc: Bogus length %zu in firmware \"%s\"\n",
-			       rdev->rlc_fw->size, fw_name);
+			pr_err("si_rlc: Bogus length %zu in firmware\n",
+			       rdev->rlc_fw->size);
 			err = -EINVAL;
 		}
 	} else {
 		err = radeon_ucode_validate(rdev->rlc_fw);
 		if (err) {
-			pr_err("si_cp: validation failed for firmware \"%s\"\n",
-			       fw_name);
+			pr_err("si_cp: validation failed for firmware\n");
 			goto out;
 		} else {
 			new_fw++;
@@ -1886,16 +1882,15 @@
 		}
 		if ((rdev->mc_fw->size != mc_req_size) &&
 		    (rdev->mc_fw->size != mc2_req_size)) {
-			pr_err("si_mc: Bogus length %zu in firmware \"%s\"\n",
-			       rdev->mc_fw->size, fw_name);
+			pr_err("si_mc: Bogus length %zu in firmware\n",
+			       rdev->mc_fw->size);
 			err = -EINVAL;
 		}
 		DRM_INFO("%s: %zu bytes\n", fw_name, rdev->mc_fw->size);
 	} else {
 		err = radeon_ucode_validate(rdev->mc_fw);
 		if (err) {
-			pr_err("si_cp: validation failed for firmware \"%s\"\n",
-			       fw_name);
+			pr_err("si_cp: validation failed for firmware\n");
 			goto out;
 		} else {
 			new_fw++;
@@ -1913,20 +1908,19 @@
 		snprintf(fw_name, sizeof(fw_name), "radeon/%s_smc.bin", chip_name);
 		err = request_firmware(&rdev->smc_fw, fw_name, rdev->dev);
 		if (err) {
-			pr_err("smc: error loading firmware \"%s\"\n", fw_name);
+			pr_err("smc: error loading firmware\n");
 			release_firmware(rdev->smc_fw);
 			rdev->smc_fw = NULL;
 			err = 0;
 		} else if (rdev->smc_fw->size != smc_req_size) {
-			pr_err("si_smc: Bogus length %zu in firmware \"%s\"\n",
-			       rdev->smc_fw->size, fw_name);
+			pr_err("si_smc: Bogus length %zu in firmware\n",
+			       rdev->smc_fw->size);
 			err = -EINVAL;
 		}
 	} else {
 		err = radeon_ucode_validate(rdev->smc_fw);
 		if (err) {
-			pr_err("si_cp: validation failed for firmware \"%s\"\n",
-			       fw_name);
+			pr_err("si_cp: validation failed for firmware\n");
 			goto out;
 		} else {
 			new_fw++;
@@ -1944,8 +1938,7 @@
 out:
 	if (err) {
 		if (err != -EINVAL)
-			pr_err("si_cp: Failed to load firmware \"%s\"\n",
-			       fw_name);
+			pr_err("si_cp: Failed to load firmware\n");
 		release_firmware(rdev->pfp_fw);
 		rdev->pfp_fw = NULL;
 		release_firmware(rdev->me_fw);
diff --color -Nru a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/firmware.c b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/firmware.c
--- a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/firmware.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/firmware.c	2023-03-09 11:53:09.993441860 -0600
@@ -763,9 +763,6 @@
 	if (!fwreq)
 		return NULL;
 
-	brcmf_info("using %s for chip %s\n",
-		   mapping_table[i].fw_base, chipname);
-
 	mp_path = brcmf_mp_global.firmware_path;
 	mp_path_len = strnlen(mp_path, BRCMF_FW_ALTPATH_LEN);
 	if (mp_path_len)
diff --color -Nru a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/pcie.c b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/pcie.c
--- a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/pcie.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/pcie.c	2023-03-09 11:53:09.993441860 -0600
@@ -1545,7 +1545,7 @@
 	if (err)
 		return err;
 
-	brcmf_dbg(PCIE, "Download FW %s\n", devinfo->fw_name);
+	brcmf_dbg(PCIE, "Download FW\n");
 	memcpy_toio(devinfo->tcm + devinfo->ci->rambase,
 		    (void *)fw->data, fw->size);
 
diff --color -Nru a/drivers/net/wireless/broadcom/brcm80211/brcmsmac/mac80211_if.c b/drivers/net/wireless/broadcom/brcm80211/brcmsmac/mac80211_if.c
--- a/drivers/net/wireless/broadcom/brcm80211/brcmsmac/mac80211_if.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/net/wireless/broadcom/brcm80211/brcmsmac/mac80211_if.c	2023-03-09 11:53:09.993441860 -0600
@@ -377,16 +377,16 @@
 			UCODE_LOADER_API_VER);
 		status = request_firmware(&wl->fw.fw_bin[i], fw_name, device);
 		if (status) {
-			wiphy_err(wl->wiphy, "%s: fail to load firmware %s\n",
-				  KBUILD_MODNAME, fw_name);
+			wiphy_err(wl->wiphy, "%s: fail to load firmware\n",
+				  KBUILD_MODNAME);
 			return status;
 		}
 		sprintf(fw_name, "%s_hdr-%d.fw", brcms_firmwares[i],
 			UCODE_LOADER_API_VER);
 		status = request_firmware(&wl->fw.fw_hdr[i], fw_name, device);
 		if (status) {
-			wiphy_err(wl->wiphy, "%s: fail to load firmware %s\n",
-				  KBUILD_MODNAME, fw_name);
+			wiphy_err(wl->wiphy, "%s: fail to load firmware\n",
+				  KBUILD_MODNAME);
 			return status;
 		}
 		wl->fw.hdr_num_entries[i] =
diff --color -Nru a/drivers/net/wireless/intel/ipw2x00/ipw2100.c b/drivers/net/wireless/intel/ipw2x00/ipw2100.c
--- a/drivers/net/wireless/intel/ipw2x00/ipw2100.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/net/wireless/intel/ipw2x00/ipw2100.c	2023-03-09 11:53:09.997441880 -0600
@@ -8372,8 +8372,8 @@
 
 	if (rc < 0) {
 		printk(KERN_ERR DRV_NAME ": "
-		       "%s: Firmware '%s' not available or load failed.\n",
-		       priv->net_dev->name, fw_name);
+		       "%s: Firmware not available or load failed.\n",
+		       priv->net_dev->name);
 		return rc;
 	}
 	IPW_DEBUG_INFO("firmware data %p size %zd\n", fw->fw_entry->data,
diff --color -Nru a/drivers/net/wireless/intel/ipw2x00/ipw2200.c b/drivers/net/wireless/intel/ipw2x00/ipw2200.c
--- a/drivers/net/wireless/intel/ipw2x00/ipw2200.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/net/wireless/intel/ipw2x00/ipw2200.c	2023-03-09 19:21:02.780816235 -0600
@@ -3394,12 +3394,12 @@
 	/* ask firmware_class module to get the boot firmware off disk */
 	rc = request_firmware(raw, name, &priv->pci_dev->dev);
 	if (rc < 0) {
-		IPW_ERROR("%s request_firmware failed: Reason %d\n", name, rc);
+		IPW_ERROR("request_firmware failed: Reason %d\n", rc);
 		return rc;
 	}
 
 	if ((*raw)->size < sizeof(*fw)) {
-		IPW_ERROR("%s is too small (%zd)\n", name, (*raw)->size);
+		IPW_ERROR("Firmware file is too small (%zd)\n", (*raw)->size);
 		return -EINVAL;
 	}
 
@@ -3407,13 +3407,12 @@
 
 	if ((*raw)->size < sizeof(*fw) + le32_to_cpu(fw->boot_size) +
 	    le32_to_cpu(fw->ucode_size) + le32_to_cpu(fw->fw_size)) {
-		IPW_ERROR("%s is too small or corrupt (%zd)\n",
-			  name, (*raw)->size);
+		IPW_ERROR("Firmware file is too small or corrupt (%zd)\n",
+			  (*raw)->size);
 		return -EINVAL;
 	}
 
-	IPW_DEBUG_INFO("Read firmware '%s' image v%d.%d (%zd bytes)\n",
-		       name,
+	IPW_DEBUG_INFO("Read firmware image v%d.%d (%zd bytes)\n",
 		       le32_to_cpu(fw->ver) >> 16,
 		       le32_to_cpu(fw->ver) & 0xff,
 		       (*raw)->size - sizeof(*fw));
@@ -3547,7 +3546,7 @@
 	/* DMA the initial boot firmware into the device */
 	rc = ipw_load_firmware(priv, boot_img, le32_to_cpu(fw->boot_size));
 	if (rc < 0) {
-		IPW_ERROR("Unable to load boot firmware: %d\n", rc);
+		IPW_ERROR("Unable to load boot firmware\n");
 		goto error;
 	}
 
@@ -3569,7 +3568,7 @@
 	/* DMA the ucode into the device */
 	rc = ipw_load_ucode(priv, ucode_img, le32_to_cpu(fw->ucode_size));
 	if (rc < 0) {
-		IPW_ERROR("Unable to load ucode: %d\n", rc);
+		IPW_ERROR("Unable to load ucode\n");
 		goto error;
 	}
 
@@ -3579,7 +3578,7 @@
 	/* DMA bss firmware into the device */
 	rc = ipw_load_firmware(priv, fw_img, le32_to_cpu(fw->fw_size));
 	if (rc < 0) {
-		IPW_ERROR("Unable to load firmware: %d\n", rc);
+		IPW_ERROR("Unable to load firmware\n");
 		goto error;
 	}
 #ifdef CONFIG_PM
@@ -11175,7 +11174,7 @@
 		 * Also start the clocks. */
 		rc = ipw_load(priv);
 		if (rc) {
-			IPW_ERROR("Unable to load firmware: %d\n", rc);
+			IPW_ERROR("Unable to load firmware\n");
 			return rc;
 		}
 
diff --color -Nru a/drivers/net/wireless/intel/iwlegacy/3945-mac.c b/drivers/net/wireless/intel/iwlegacy/3945-mac.c
--- a/drivers/net/wireless/intel/iwlegacy/3945-mac.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/net/wireless/intel/iwlegacy/3945-mac.c	2023-03-09 18:19:33.326779411 -0600
@@ -1835,19 +1835,19 @@
 		sprintf(buf, "%s%u%s", name_pre, idx, ".ucode");
 		ret = request_firmware(&ucode_raw, buf, &il->pci_dev->dev);
 		if (ret < 0) {
-			IL_ERR("%s firmware file req failed: %d\n", buf, ret);
+			IL_ERR("Firmware file req failed: %d\n", ret);
 			if (ret == -ENOENT)
 				continue;
 			else
 				goto error;
 		} else {
 			if (idx < api_max)
-				IL_ERR("Loaded firmware %s, "
+				IL_ERR("Loaded firmware, "
 				       "which is deprecated. "
-				       " Please use API v%u instead.\n", buf,
+				       " Please use API v%u instead.\n",
 				       api_max);
-			D_INFO("Got firmware '%s' file "
-			       "(%zd bytes) from disk\n", buf, ucode_raw->size);
+			D_INFO("Got firmware file "
+			       "(%zd bytes) from disk\n", ucode_raw->size);
 			break;
 		}
 	}
@@ -3692,7 +3692,7 @@
 		goto out_unset_hw_params;
 	}
 
-	IL_INFO("Detected Intel Wireless WiFi Link %s\n", il->cfg->name);
+	IL_INFO("Detected Intel Wireless WiFi Link\n");
 
 	/***********************
 	 * 7. Setup Services
diff --color -Nru a/drivers/net/wireless/intel/iwlegacy/4965-mac.c b/drivers/net/wireless/intel/iwlegacy/4965-mac.c
--- a/drivers/net/wireless/intel/iwlegacy/4965-mac.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/net/wireless/intel/iwlegacy/4965-mac.c	2023-03-09 11:53:09.997441880 -0600
@@ -4684,7 +4684,7 @@
 
 	sprintf(il->firmware_name, "%s%s%s", name_pre, tag, ".ucode");
 
-	D_INFO("attempting to load firmware '%s'\n", il->firmware_name);
+	D_INFO("attempting to load firmware\n");
 
 	return request_firmware_nowait(THIS_MODULE, 1, il->firmware_name,
 				       &il->pci_dev->dev, GFP_KERNEL, il,
@@ -4774,13 +4774,11 @@
 
 	if (!ucode_raw) {
 		if (il->fw_idx <= il->cfg->ucode_api_max)
-			IL_ERR("request for firmware file '%s' failed.\n",
-			       il->firmware_name);
+			IL_ERR("request for firmware file failed.\n");
 		goto try_again;
 	}
 
-	D_INFO("Loaded firmware file '%s' (%zd bytes).\n", il->firmware_name,
-	       ucode_raw->size);
+	D_INFO("Loaded firmware file (%zd bytes).\n", ucode_raw->size);
 
 	/* Make sure that we got at least the API version number */
 	if (ucode_raw->size < 4) {
diff --git a/drivers/net/wireless/intel/iwlegacy/common.c b/drivers/net/wireless/intel/iwlegacy/common.c
index 96002121..1a60743b 100644
--- a/drivers/net/wireless/intel/iwlegacy/common.c
+++ b/drivers/net/wireless/intel/iwlegacy/common.c
@@ -4149,7 +4149,7 @@ il_irq_handle_error(struct il_priv *il)
 	/* Cancel currently queued command. */
 	clear_bit(S_HCMD_ACTIVE, &il->status);
 
-	IL_ERR("Loaded firmware version: %s\n", il->hw->wiphy->fw_version);
+	IL_ERR("Loaded firmware\n");
 
 	il->ops->dump_nic_error_log(il);
 	if (il->ops->dump_fh)
diff --color -Nru a/drivers/net/wireless/intel/iwlwifi/dvm/main.c b/drivers/net/wireless/intel/iwlwifi/dvm/main.c
--- a/drivers/net/wireless/intel/iwlwifi/dvm/main.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/net/wireless/intel/iwlwifi/dvm/main.c	2023-03-09 11:53:09.997441880 -0600
@@ -1248,7 +1248,7 @@
 	 ************************/
 	hw = iwl_alloc_all();
 	if (!hw) {
-		pr_err("%s: Cannot allocate network device\n", trans->name);
+		pr_err("Cannot allocate network device\n");
 		goto out;
 	}
 
@@ -1376,8 +1376,7 @@
 	/***********************
 	 * 2. Read REV register
 	 ***********************/
-	IWL_INFO(priv, "Detected %s, REV=0x%X\n",
-		priv->trans->name, priv->trans->hw_rev);
+	IWL_INFO(priv, "Detected, REV=0x%X\n", priv->trans->hw_rev);
 
 	if (iwl_trans_start_hw(priv->trans))
 		goto out_free_hw;
@@ -1947,8 +1947,7 @@ static void iwl_nic_error(struct iwl_op_mode *op_mode, bool sync)
 {
 	struct iwl_priv *priv = IWL_OP_MODE_GET_DVM(op_mode);
 
-	IWL_ERR(priv, "Loaded firmware version: %s\n",
-		priv->fw->fw_version);
+	IWL_ERR(priv, "Loaded firmware version\n");
 
 	iwl_dump_nic_error_log(priv);
 	iwl_dump_nic_event_log(priv, false, NULL);
diff --git a/drivers/net/wireless/intel/iwlwifi/fw/dump.c b/drivers/net/wireless/intel/iwlwifi/fw/dump.c
index 5876f917..472c617d 100644
--- a/drivers/net/wireless/intel/iwlwifi/fw/dump.c
+++ b/drivers/net/wireless/intel/iwlwifi/fw/dump.c
@@ -229,7 +229,7 @@ static void iwl_fwrt_dump_lmac_error_log(struct iwl_fw_runtime *fwrt, u8 lmac_nu
 
 	/* Do not change this output - scripts rely on it */
 
-	IWL_ERR(fwrt, "Loaded firmware version: %s\n", fwrt->fw->fw_version);
+	IWL_ERR(fwrt, "Loaded firmware version\n");
 
 	IWL_ERR(fwrt, "0x%08X | %-28s\n", table.error_id,
 		iwl_fw_lookup_assert_desc(table.error_id));
diff --color -Nru a/drivers/net/wireless/intel/iwlwifi/iwl-nvm-parse.c b/drivers/net/wireless/intel/iwlwifi/iwl-nvm-parse.c
--- a/drivers/net/wireless/intel/iwlwifi/iwl-nvm-parse.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/net/wireless/intel/iwlwifi/iwl-nvm-parse.c	2023-03-09 11:53:09.997441880 -0600
@@ -1583,13 +1583,11 @@
 	 */
 	ret = request_firmware(&fw_entry, nvm_file_name, trans->dev);
 	if (ret) {
-		IWL_ERR(trans, "ERROR: %s isn't available %d\n",
-			nvm_file_name, ret);
+		IWL_ERR(trans, "ERROR: firmware isn't available %d\n", ret);
 		return ret;
 	}
 
-	IWL_INFO(trans, "Loaded NVM file %s (%zu bytes)\n",
-		 nvm_file_name, fw_entry->size);
+	IWL_INFO(trans, "Loaded NVM file (%zu bytes)\n", fw_entry->size);
 
 	if (fw_entry->size > MAX_NVM_FILE_LEN) {
 		IWL_ERR(trans, "NVM file too large\n");
diff --color -Nru a/drivers/net/wireless/intel/iwlwifi/mvm/ops.c b/drivers/net/wireless/intel/iwlwifi/mvm/ops.c
--- a/drivers/net/wireless/intel/iwlwifi/mvm/ops.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/net/wireless/intel/iwlwifi/mvm/ops.c	2023-03-09 11:53:09.997441880 -0600
@@ -1285,8 +1285,7 @@
 		goto out_free;
 	}
 
-	IWL_INFO(mvm, "Detected %s, REV=0x%X\n",
-		 mvm->trans->name, mvm->trans->hw_rev);
+	IWL_INFO(mvm, "Detected, REV=0x%X\n", mvm->trans->hw_rev);
 
 	if (iwlwifi_mod_params.nvm_file)
 		mvm->nvm_file_name = iwlwifi_mod_params.nvm_file;
diff --color -Nru a/drivers/net/wireless/realtek/rtl8xxxu/rtl8xxxu_core.c b/drivers/net/wireless/realtek/rtl8xxxu/rtl8xxxu_core.c
--- a/drivers/net/wireless/realtek/rtl8xxxu/rtl8xxxu_core.c	2023-03-09 11:48:45.000000000 -0600
+++ b/drivers/net/wireless/realtek/rtl8xxxu/rtl8xxxu_core.c	2023-03-09 11:53:09.997441880 -0600
@@ -2073,9 +2073,9 @@
 	int ret = 0;
 	u16 signature;
 
-	dev_info(dev, "%s: Loading firmware %s\n", DRIVER_NAME, fw_name);
+	dev_info(dev, "%s: Loading firmware\n", DRIVER_NAME);
 	if (request_firmware(&fw, fw_name, &priv->udev->dev)) {
-		dev_warn(dev, "request_firmware(%s) failed\n", fw_name);
+		dev_warn(dev, "request_firmware failed\n");
 		ret = -EAGAIN;
 		goto exit;
 	}
diff --color -Nru a/drivers/net/wireless/realtek/rtlwifi/core.c b/drivers/net/wireless/realtek/rtlwifi/core.c
--- a/drivers/net/wireless/realtek/rtlwifi/core.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/net/wireless/realtek/rtlwifi/core.c	2023-03-09 11:53:09.997441880 -0600
@@ -83,8 +83,7 @@
 			err = request_firmware(&firmware,
 					       rtlpriv->cfg->alt_fw_name,
 					       rtlpriv->io.dev);
-			pr_info("Loading alternative firmware %s\n",
-				rtlpriv->cfg->alt_fw_name);
+			pr_info("Loading alternative firmware\n");
 			if (!err)
 				goto found_alt;
 		}
diff --color -Nru a/drivers/net/wireless/realtek/rtlwifi/rtl8188ee/sw.c b/drivers/net/wireless/realtek/rtlwifi/rtl8188ee/sw.c
--- a/drivers/net/wireless/realtek/rtlwifi/rtl8188ee/sw.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/net/wireless/realtek/rtlwifi/rtl8188ee/sw.c	2023-03-09 11:53:09.997441880 -0600
@@ -143,7 +143,7 @@
 
 	fw_name = "rtlwifi/rtl8188efw.bin";
 	rtlpriv->max_fw_size = 0x8000;
-	pr_info("Using firmware %s\n", fw_name);
+	pr_info("Using firmware\n");
 	err = request_firmware_nowait(THIS_MODULE, 1, fw_name,
 				      rtlpriv->io.dev, GFP_KERNEL, hw,
 				      rtl_fw_cb);
diff --color -Nru a/drivers/net/wireless/realtek/rtlwifi/rtl8192ce/sw.c b/drivers/net/wireless/realtek/rtlwifi/rtl8192ce/sw.c
--- a/drivers/net/wireless/realtek/rtlwifi/rtl8192ce/sw.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/net/wireless/realtek/rtlwifi/rtl8192ce/sw.c	2023-03-09 11:53:09.997441880 -0600
@@ -146,7 +146,7 @@
 		fw_name = "rtlwifi/rtl8192cfw.bin";
 
 	rtlpriv->max_fw_size = 0x4000;
-	pr_info("Using firmware %s\n", fw_name);
+	pr_info("Using firmware\n");
 	err = request_firmware_nowait(THIS_MODULE, 1, fw_name,
 				      rtlpriv->io.dev, GFP_KERNEL, hw,
 				      rtl_fw_cb);
diff --color -Nru a/drivers/net/wireless/realtek/rtlwifi/rtl8192cu/sw.c b/drivers/net/wireless/realtek/rtlwifi/rtl8192cu/sw.c
--- a/drivers/net/wireless/realtek/rtlwifi/rtl8192cu/sw.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/net/wireless/realtek/rtlwifi/rtl8192cu/sw.c	2023-03-09 11:53:09.997441880 -0600
@@ -55,7 +55,7 @@
 	}
 	/* provide name of alternative file */
 	rtlpriv->cfg->alt_fw_name = "rtlwifi/rtl8192cufw.bin";
-	pr_info("Loading firmware %s\n", fw_name);
+	pr_info("Loading firmware\n");
 	rtlpriv->max_fw_size = 0x4000;
 	err = request_firmware_nowait(THIS_MODULE, 1,
 				      fw_name, rtlpriv->io.dev,
diff --color -Nru a/drivers/net/wireless/realtek/rtlwifi/rtl8192de/sw.c b/drivers/net/wireless/realtek/rtlwifi/rtl8192de/sw.c
--- a/drivers/net/wireless/realtek/rtlwifi/rtl8192de/sw.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/net/wireless/realtek/rtlwifi/rtl8192de/sw.c	2023-03-09 11:53:10.001441899 -0600
@@ -154,7 +154,7 @@
 
 	rtlpriv->max_fw_size = 0x8000;
 	pr_info("Driver for Realtek RTL8192DE WLAN interface\n");
-	pr_info("Loading firmware file %s\n", fw_name);
+	pr_info("Loading firmware file\n");
 
 	/* request fw */
 	err = request_firmware_nowait(THIS_MODULE, 1, fw_name,
diff --color -Nru a/drivers/net/wireless/realtek/rtlwifi/rtl8192ee/sw.c b/drivers/net/wireless/realtek/rtlwifi/rtl8192ee/sw.c
--- a/drivers/net/wireless/realtek/rtlwifi/rtl8192ee/sw.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/net/wireless/realtek/rtlwifi/rtl8192ee/sw.c	2023-03-09 11:53:10.001441899 -0600
@@ -149,7 +149,7 @@
 	fw_name = "rtlwifi/rtl8192eefw.bin";
 
 	rtlpriv->max_fw_size = 0x8000;
-	pr_info("Using firmware %s\n", fw_name);
+	pr_info("Using firmware\n");
 	err = request_firmware_nowait(THIS_MODULE, 1, fw_name,
 				      rtlpriv->io.dev, GFP_KERNEL, hw,
 				      rtl_fw_cb);
diff --color -Nru a/drivers/net/wireless/realtek/rtlwifi/rtl8192se/sw.c b/drivers/net/wireless/realtek/rtlwifi/rtl8192se/sw.c
--- a/drivers/net/wireless/realtek/rtlwifi/rtl8192se/sw.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/net/wireless/realtek/rtlwifi/rtl8192se/sw.c	2023-03-09 11:53:10.001441899 -0600
@@ -69,7 +69,7 @@
 		"Firmware callback routine entered!\n");
 	complete(&rtlpriv->firmware_loading_complete);
 	if (!firmware) {
-		pr_err("Firmware %s not available\n", fw_name);
+		pr_err("Firmware not available\n");
 		rtlpriv->max_fw_size = 0;
 		return;
 	}
@@ -185,7 +185,7 @@
 	rtlpriv->max_fw_size = RTL8190_MAX_FIRMWARE_CODE_SIZE*2 +
 			       sizeof(struct fw_hdr);
 	pr_info("Driver for Realtek RTL8192SE/RTL8191SE\n"
-		"Loading firmware %s\n", fw_name);
+		"Loading firmware\n");
 	/* request fw */
 	err = request_firmware_nowait(THIS_MODULE, 1, fw_name,
 				      rtlpriv->io.dev, GFP_KERNEL, hw,
diff --color -Nru a/drivers/net/wireless/realtek/rtlwifi/rtl8723ae/sw.c b/drivers/net/wireless/realtek/rtlwifi/rtl8723ae/sw.c
--- a/drivers/net/wireless/realtek/rtlwifi/rtl8723ae/sw.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/net/wireless/realtek/rtlwifi/rtl8723ae/sw.c	2023-03-09 11:53:10.001441899 -0600
@@ -152,7 +152,7 @@
 		fw_name = "rtlwifi/rtl8723fw_B.bin";
 
 	rtlpriv->max_fw_size = 0x6000;
-	pr_info("Using firmware %s\n", fw_name);
+	pr_info("Using firmware\n");
 	err = request_firmware_nowait(THIS_MODULE, 1, fw_name,
 				      rtlpriv->io.dev, GFP_KERNEL, hw,
 				      rtl_fw_cb);
diff --color -Nru a/drivers/net/wireless/realtek/rtlwifi/rtl8723be/sw.c b/drivers/net/wireless/realtek/rtlwifi/rtl8723be/sw.c
--- a/drivers/net/wireless/realtek/rtlwifi/rtl8723be/sw.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/net/wireless/realtek/rtlwifi/rtl8723be/sw.c	2023-03-09 11:53:10.001441899 -0600
@@ -156,7 +156,7 @@
 	}
 
 	rtlpriv->max_fw_size = 0x8000;
-	pr_info("Using firmware %s\n", fw_name);
+	pr_info("Using firmware\n");
 	err = request_firmware_nowait(THIS_MODULE, 1, fw_name,
 				      rtlpriv->io.dev, GFP_KERNEL, hw,
 				      rtl_fw_cb);
diff --color -Nru a/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/sw.c b/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/sw.c
--- a/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/sw.c	2022-07-31 16:03:01.000000000 -0500
+++ b/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/sw.c	2023-03-09 11:53:10.001441899 -0600
@@ -185,7 +185,7 @@
 
 	rtlpriv->max_fw_size = 0x8000;
 	/*load normal firmware*/
-	pr_info("Using firmware %s\n", fw_name);
+	pr_info("Using firmware\n");
 	err = request_firmware_nowait(THIS_MODULE, 1, fw_name,
 				      rtlpriv->io.dev, GFP_KERNEL, hw,
 				      rtl_fw_cb);
@@ -196,7 +196,7 @@
 		return 1;
 	}
 	/*load wowlan firmware*/
-	pr_info("Using firmware %s\n", wowlan_fw_name);
+	pr_info("Using firmware\n");
 	err = request_firmware_nowait(THIS_MODULE, 1,
 				      wowlan_fw_name,
 				      rtlpriv->io.dev, GFP_KERNEL, hw,
diff -Nru --color a/drivers/gpu/drm/amd/amdgpu/amdgpu_discovery.c b/drivers/gpu/drm/amd/amdgpu/amdgpu_discovery.c
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_discovery.c	2023-03-13 07:14:05.000000000 +0000
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_discovery.c	2023-03-13 07:46:23.778827386 +0000
@@ -223,8 +223,7 @@
 
 	r = request_firmware(&fw, fw_name, adev->dev);
 	if (r) {
-		dev_err(adev->dev, "can't load firmware \"%s\"\n",
-			fw_name);
+		dev_err(adev->dev, "can't load firmware\n");
 		return r;
 	}
 
#removed since v6.5 --ark74
#diff -Nru --color a/drivers/gpu/drm/amd/amdgpu/gfx_v11_0.c b/drivers/gpu/drm/amd/amdgpu/gfx_v11_0.c
#@@ -821,8 +821,7 @@
# out:
# 	if (err) {
# 		dev_err(adev->dev,
#-			"gfx11: Failed to init firmware \"%s\"\n",
#-			fw_name);
#+			"gfx11: Failed to load firmware\n");
# 		release_firmware(adev->gfx.pfp_fw);
# 		adev->gfx.pfp_fw = NULL;
# 		release_firmware(adev->gfx.me_fw);
diff -Nru --color a/drivers/gpu/drm/amd/amdgpu/imu_v11_0.c b/drivers/gpu/drm/amd/amdgpu/imu_v11_0.c
--- a/drivers/gpu/drm/amd/amdgpu/imu_v11_0.c2022-07-31 21:03:01.000000000 +0000
+++ b/drivers/gpu/drm/amd/amdgpu/imu_v11_0.c	2023-03-13 07:45:31.295016045 +0000
@@ -73,8 +73,7 @@ static int imu_v11_0_init_microcode(struct amdgpu_device *adev)
 out:
 	if (err) {
 		dev_err(adev->dev,
-			"gfx11: Failed to load firmware \"%s\"\n",
-			fw_name);
+			"gfx11: Failed to load firmware\n");
 		amdgpu_ucode_release(&adev->gfx.imu_fw);
 	}

#removed since v6.2 --ark74
#diff -Nru --color a/drivers/gpu/drm/amd/amdgpu/sdma_v6_0.c b/drivers/gpu/drm/amd/amdgpu/sdma_v6_0.c
#@@ -162,7 +162,7 @@
# 
# out:
# 	if (err) {
#-		DRM_ERROR("sdma_v6_0: Failed to load firmware \"%s\"\n", fw_name);
#+		DRM_ERROR("sdma_v6_0: Failed to load firmware\n");
# 		sdma_v6_0_destroy_inst_ctx(adev);
# 	}
# 	return err;
diff -Nru --color a/drivers/gpu/drm/radeon/cik.c b/drivers/gpu/drm/radeon/cik.c
--- a/drivers/gpu/drm/radeon/cik.c	2023-03-13 07:30:35.362282308 +0000
+++ b/drivers/gpu/drm/radeon/cik.c	2023-03-13 07:47:11.750655564 +0000
@@ -2238,8 +2238,7 @@
 			snprintf(fw_name, sizeof(fw_name), "radeon/%s_smc.bin", chip_name);
 			err = request_firmware(&rdev->smc_fw, fw_name, rdev->dev);
 			if (err) {
-				pr_err("smc: error loading firmware \"%s\"\n",
-				       fw_name);
+				pr_err("smc: error loading firmware\n");
 				release_firmware(rdev->smc_fw);
 				rdev->smc_fw = NULL;
 				err = 0;
diff -Nru --color a/drivers/net/wireless/intel/ipw2x00/ipw2100.c b/drivers/net/wireless/intel/ipw2x00/ipw2100.c
--- a/drivers/net/wireless/intel/ipw2x00/ipw2100.c	2023-03-13 07:30:35.446282020 +0000
+++ b/drivers/net/wireless/intel/ipw2x00/ipw2100.c	2023-03-13 07:48:46.790316692 +0000
@@ -1058,8 +1058,8 @@
 	/* load f/w */
 	err = ipw2100_fw_download(priv, &ipw2100_firmware);
 	if (err) {
-		IPW_DEBUG_ERROR("%s: Error loading firmware: %d\n",
-				priv->net_dev->name, err);
+		IPW_DEBUG_ERROR("%s: Error loading firmware\n",
+				priv->net_dev->name);
 		goto fail;
 	}
 #ifndef CONFIG_PM
diff -Nru --color a/drivers/net/wireless/intel/iwlwifi/iwl-drv.c b/drivers/net/wireless/intel/iwlwifi/iwl-drv.c
--- a/drivers/net/wireless/intel/iwlwifi/iwl-drv.c	2023-03-13 07:30:35.554281653 +0000
+++ b/drivers/net/wireless/intel/iwlwifi/iwl-drv.c	2023-03-13 07:55:50.464823615 +0000
@@ -1402,8 +1402,8 @@
 	if (!ucode_raw)
 		goto try_again;
 
-	IWL_DEBUG_FW_INFO(drv, "Loaded firmware file '%s' (%zd bytes).\n",
-			  drv->firmware_name, ucode_raw->size);
+	IWL_DEBUG_FW_INFO(drv, "Loaded firmware file (%zd bytes).\n",
+			  ucode_raw->size);
 
 	/* Make sure that we got at least the API version number */
 	if (ucode_raw->size < 4) {
@@ -1616,8 +1616,8 @@
 		break;
 	}
 
-	IWL_INFO(drv, "loaded firmware version %s op_mode %s\n",
-		 drv->fw.fw_version, op->name);
+	IWL_INFO(drv, "loaded firmware version %s\n",
+		 drv->fw.fw_version);
 
 	/* add this device to the list of devices using this op_mode */
 	list_add_tail(&drv->list, &op->drv);
diff --git a/drivers/bluetooth/ath3k.c b/drivers/bluetooth/ath3k.c
index 88262d3..93b3826 100644
--- a/drivers/bluetooth/ath3k.c
+++ b/drivers/bluetooth/ath3k.c
@@ -382,7 +382,7 @@ static int ath3k_load_patch(struct usb_device *udev)
 
 	ret = request_firmware(&firmware, filename, &udev->dev);
 	if (ret < 0) {
-		BT_ERR("Patch file not found %s", filename);
+		BT_ERR("Patch file not found");
 		return ret;
 	}
 
@@ -445,7 +445,7 @@ static int ath3k_load_syscfg(struct usb_device *udev)
 
 	ret = request_firmware(&firmware, filename, &udev->dev);
 	if (ret < 0) {
-		BT_ERR("Configuration file not found %s", filename);
+		BT_ERR("Configuration file not found");
 		return ret;
 	}
 
@@ -501,11 +501,10 @@ static int ath3k_probe(struct usb_interface *intf,
 	ret = request_firmware(&firmware, ATH3K_FIRMWARE, &udev->dev);
 	if (ret < 0) {
 		if (ret == -ENOENT)
-			BT_ERR("Firmware file \"%s\" not found",
-			       ATH3K_FIRMWARE);
+			BT_ERR("Firmware file not found");
 		else
-			BT_ERR("Firmware file \"%s\" request failed (err=%d)",
-			       ATH3K_FIRMWARE, ret);
+			BT_ERR("Firmware file request failed (err=%d)",
+			       ret);
 		return ret;
 	}
 
diff --git a/drivers/bluetooth/btbcm.c b/drivers/bluetooth/btbcm.c
index d8fe39e..f9c6a53 100644
--- a/drivers/bluetooth/btbcm.c
+++ b/drivers/bluetooth/btbcm.c
@@ -640,9 +640,7 @@ int btbcm_initialize(struct hci_dev *hdev, bool *fw_load_done)
 
 		release_firmware(fw);
 	} else {
-		bt_dev_err(hdev, "BCM: firmware Patch file not found, tried:");
-		for (i = 0; i < fw_name_count; i++)
-			bt_dev_err(hdev, "BCM: '%s'", fw_name[i]);
+		bt_dev_err(hdev, "BCM: firmware Patch file not found");
 	}
 
 	kfree(fw_name);
diff --git a/drivers/bluetooth/btintel.c b/drivers/bluetooth/btintel.c
index 0c2542c..dc1fa9b 100644
--- a/drivers/bluetooth/btintel.c
+++ b/drivers/bluetooth/btintel.c
@@ -346,8 +346,8 @@ int btintel_load_ddc_config(struct hci_dev *hdev, const char *ddc_name)
 
 	err = request_firmware_direct(&fw, ddc_name, &hdev->dev);
 	if (err < 0) {
-		bt_dev_err(hdev, "Failed to load Intel DDC file %s (%d)",
-			   ddc_name, err);
+		bt_dev_err(hdev, "Failed to load Intel DDC file (%d)",
+			   err);
 		return err;
 	}
 
@@ -1412,8 +1412,8 @@ static const struct firmware *btintel_legacy_rom_get_fw(struct hci_dev *hdev,
 			return NULL;
 		}
 
-		bt_dev_err(hdev, "failed to open Intel firmware file: %s (%d)",
-			   fwname, ret);
+		bt_dev_err(hdev, "failed to open Intel firmware file: (%d)",
+			   ret);
 
 		/* If the correct firmware patch file is not found, use the
 		 * default firmware patch file instead
@@ -1421,8 +1421,7 @@ static const struct firmware *btintel_legacy_rom_get_fw(struct hci_dev *hdev,
 		snprintf(fwname, sizeof(fwname), "intel/ibt-hw-%x.%x.bseq",
 			 ver->hw_platform, ver->hw_variant);
 		if (request_firmware(&fw, fwname, &hdev->dev) < 0) {
-			bt_dev_err(hdev, "failed to open default fw file: %s",
-				   fwname);
+			bt_dev_err(hdev, "failed to open default fw file");
 			return NULL;
 		}
 	}
@@ -1913,8 +1912,8 @@ download:
 			return 0;
 		}
 
-		bt_dev_err(hdev, "Failed to load Intel firmware file %s (%d)",
-			   fwname, err);
+		bt_dev_err(hdev, "Failed to load Intel firmware file (%d)",
+			   err);
 		return err;
 	}
 
@@ -2102,8 +2101,8 @@ static int btintel_prepare_fw_download_tlv(struct hci_dev *hdev,
 			return 0;
 		}
 
-		bt_dev_err(hdev, "Failed to load Intel firmware file %s (%d)",
-			   fwname, err);
+		bt_dev_err(hdev, "Failed to load Intel firmware file (%d)",
+			   err);
 
 		return err;
 	}
diff --git a/drivers/bluetooth/btrtl.c b/drivers/bluetooth/btrtl.c
index 47c28fd..020fe67 100644
--- a/drivers/bluetooth/btrtl.c
+++ b/drivers/bluetooth/btrtl.c
@@ -693,8 +693,7 @@ out_free:
 	btrtl_dev->fw_len = rtl_load_file(hdev, btrtl_dev->ic_info->fw_name,
 					  &btrtl_dev->fw_data);
 	if (btrtl_dev->fw_len < 0) {
-		rtl_dev_err(hdev, "firmware file %s not found",
-			    btrtl_dev->ic_info->fw_name);
+		rtl_dev_err(hdev, "firmware file not found");
 		ret = btrtl_dev->fw_len;
 		goto err_free;
 	}
@@ -711,8 +710,7 @@ out_free:
 						   &btrtl_dev->cfg_data);
 		if (btrtl_dev->ic_info->config_needed &&
 		    btrtl_dev->cfg_len <= 0) {
-			rtl_dev_err(hdev, "mandatory config file %s not found",
-				    btrtl_dev->ic_info->cfg_name);
+			rtl_dev_err(hdev, "mandatory config file not found");
 			ret = btrtl_dev->cfg_len;
 			goto err_free;
 		}
diff --git a/drivers/bluetooth/btusb.c b/drivers/bluetooth/btusb.c
index 3a40f84..8c6d37d 100644
--- a/drivers/bluetooth/btusb.c
+++ b/drivers/bluetooth/btusb.c
@@ -3338,8 +3338,8 @@ static int btusb_setup_qca_load_nvm(struct hci_dev *hdev,
 
 	err = request_firmware(&fw, fwname, &hdev->dev);
 	if (err) {
-		bt_dev_err(hdev, "failed to request NVM file: %s (%d)",
-			   fwname, err);
+		bt_dev_err(hdev, "failed to request NVM file: (%d)",
+			   err);
 		return err;
 	}
 
diff --git a/drivers/bluetooth/hci_ag6xx.c b/drivers/bluetooth/hci_ag6xx.c
index 2d40302..d35d7e0 100644
--- a/drivers/bluetooth/hci_ag6xx.c
+++ b/drivers/bluetooth/hci_ag6xx.c
@@ -195,8 +195,8 @@ static int ag6xx_setup(struct hci_uart *hu)
 
 	err = request_firmware(&fw, fwname, &hdev->dev);
 	if (err < 0) {
-		bt_dev_err(hdev, "Failed to open Intel bddata file: %s (%d)",
-			   fwname, err);
+		bt_dev_err(hdev, "Failed to open Intel bddata file: (%d)",
+			   err);
 		goto patch;
 	}
 
@@ -232,8 +232,8 @@ patch:
 
 	err = request_firmware(&fw, fwname, &hdev->dev);
 	if (err < 0) {
-		bt_dev_err(hdev, "Failed to open Intel patch file: %s(%d)",
-			   fwname, err);
+		bt_dev_err(hdev, "Failed to open Intel patch file (%d)",
+			   err);
 		goto complete;
 	}
 	fw_ptr = fw->data;

diff --git a/drivers/bluetooth/hci_ll.c b/drivers/bluetooth/hci_ll.c
index 5abc01a..3a08e98 100644
--- a/drivers/bluetooth/hci_ll.c
+++ b/drivers/bluetooth/hci_ll.c
@@ -539,7 +539,7 @@ static int download_firmware(struct ll_device *lldev)
 
 	err = request_firmware(&fw, bts_scr_name, &lldev->serdev->dev);
 	if (err || !fw->data || !fw->size) {
-		bt_dev_err(lldev->hu.hdev, "request_firmware failed(errno %d) for %s",
+		bt_dev_err(lldev->hu.hdev, "request_firmware failed (errno %d) for %s",
 			   err, bts_scr_name);
 		return -EINVAL;
 	}
diff --git a/drivers/bluetooth/hci_mrvl.c b/drivers/bluetooth/hci_mrvl.c
index fbc3f7c..054b30a 100644
--- a/drivers/bluetooth/hci_mrvl.c
+++ b/drivers/bluetooth/hci_mrvl.c
@@ -277,7 +277,7 @@ static int mrvl_load_firmware(struct hci_dev *hdev, const char *name)
 
 	err = request_firmware(&fw, name, &hdev->dev);
 	if (err < 0) {
-		bt_dev_err(hdev, "Failed to load firmware file %s", name);
+		bt_dev_err(hdev, "Failed to load firmware file");
 		return err;
 	}
 
diff --git a/drivers/bluetooth/hci_intel.c b/drivers/bluetooth/hci_intel.c
index 78afb9a..f9d2740 100644
--- a/drivers/bluetooth/hci_intel.c
+++ b/drivers/bluetooth/hci_intel.c
@@ -706,7 +706,7 @@ static int intel_setup(struct hci_uart *hu)
 		return err;
 	}
 
-	bt_dev_info(hdev, "Found device firmware: %s", fwname);
+	bt_dev_info(hdev, "Found device firmware");
 
 	/* Save the DDC file name for later */
 	switch (ver.hw_variant) {
diff --git a/drivers/gpu/drm/i915/display/intel_dmc.c b/drivers/gpu/drm/i915/display/intel_dmc.c
index a171d42..b2fb944 100644
--- a/drivers/gpu/drm/i915/display/intel_dmc.c
+++ b/drivers/gpu/drm/i915/display/intel_dmc.c
@@ -956,11 +956,8 @@ static void dmc_load_work_fn(struct work_struct *work)
 			DMC_VERSION_MINOR(dmc->version));
 	} else {
 		drm_notice(&i915->drm,
-			   "Failed to load DMC firmware %s."
-			   " Disabling runtime power management.\n",
-			   dmc->fw_path);
-		drm_notice(&i915->drm, "DMC firmware homepage: %s",
-			   INTEL_UC_FIRMWARE_URL);
+                          "Failed to load DMC firmware."
+			   " Disabling runtime power management.\n");
 	}
 
 	release_firmware(fw);
diff --git a/drivers/gpu/drm/i915/display/intel_opregion.c b/drivers/gpu/drm/i915/display/intel_opregion.c
index f31e8c3..a4188d6 100644
--- a/drivers/gpu/drm/i915/display/intel_opregion.c
+++ b/drivers/gpu/drm/i915/display/intel_opregion.c
@@ -846,8 +846,8 @@ static int intel_load_vbt_firmware(struct drm_i915_private *dev_priv)
 	ret = request_firmware(&fw, name, dev_priv->drm.dev);
 	if (ret) {
 		drm_err(&dev_priv->drm,
-			"Requesting VBT firmware \"%s\" failed (%d)\n",
-			name, ret);
+			"Requesting VBT firmware failed (%d)\n",
+			ret);
 		return ret;
 	}
 
@@ -863,8 +863,7 @@ static int intel_load_vbt_firmware(struct drm_i915_private *dev_priv)
 			ret = -ENOMEM;
 		}
 	} else {
-		drm_dbg_kms(&dev_priv->drm, "Invalid VBT firmware \"%s\"\n",
-			    name);
+		drm_dbg_kms(&dev_priv->drm, "Invalid VBT firmware\n");
 		ret = -EINVAL;
 	}
 
diff --git a/drivers/gpu/drm/i915/gvt/firmware.c b/drivers/gpu/drm/i915/gvt/firmware.c
index 54fe442..1079138 100644
--- a/drivers/gpu/drm/i915/gvt/firmware.c
+++ b/drivers/gpu/drm/i915/gvt/firmware.c
@@ -183,8 +183,8 @@ static int verify_firmware(struct intel_gvt *gvt,
 	return 0;
 
 invalid_firmware:
-	gvt_dbg_core("Invalid firmware: %s [file] 0x%llx [request] 0x%llx\n",
-		     item, file, request);
+	gvt_dbg_core("Invalid firmware: [request] 0x%llx\n",
+		     request);
 	return -EINVAL;
 }
 
@@ -231,7 +231,7 @@ int intel_gvt_load_firmware(struct intel_gvt *gvt)
 		 GVT_FIRMWARE_PATH, pdev->vendor, pdev->device,
 		 pdev->revision);
 
-	gvt_dbg_core("request hw state firmware %s...\n", path);
+	gvt_dbg_core("request hw state firmware\n");
 
 	ret = request_firmware(&fw, path, gvt->gt->i915->drm.dev);
 	kfree(path);
diff --git a/drivers/bluetooth/hci_bcm4377.c b/drivers/bluetooth/hci_bcm4377.c
index 19ad0e7..93029ca 100644
--- a/drivers/bluetooth/hci_bcm4377.c
+++ b/drivers/bluetooth/hci_bcm4377.c
@@ -1203,8 +1203,7 @@ static const struct firmware *bcm4377_request_blob(struct bcm4377_data *bcm4377,
 	snprintf(name1, sizeof(name1), "brcm/brcmbt%04x%s-%s.%s",
 		 bcm4377->hw->id, bcm4377->stepping, bcm4377->board_type,
 		 suffix);
-	dev_dbg(&bcm4377->pdev->dev, "Trying to load firmware: '%s' or '%s'\n",
-		name0, name1);
+	dev_dbg(&bcm4377->pdev->dev, "Trying to load firmware\n");
 
 	ret = firmware_request_nowarn(&fw, name0, &bcm4377->pdev->dev);
 	if (!ret)
@@ -1214,7 +1213,7 @@ static const struct firmware *bcm4377_request_blob(struct bcm4377_data *bcm4377,
 		return fw;
 
 	dev_err(&bcm4377->pdev->dev,
-		"Unable to load firmware; tried '%s' and '%s'\n", name0, name1);
+		"Unable to load firmware");
 	return NULL;
 }
 
diff --git a/drivers/gpu/drm/i915/gt/uc/intel_uc_fw.c b/drivers/gpu/drm/i915/gt/uc/intel_uc_fw.c
index 944725e6..544fa201 100644
--- a/drivers/gpu/drm/i915/gt/uc/intel_uc_fw.c
+++ b/drivers/gpu/drm/i915/gt/uc/intel_uc_fw.c
@@ -864,18 +864,7 @@ int intel_uc_fw_fetch(struct intel_uc_fw *uc_fw)
 		/* Preserve the version that was really wanted */
 		memcpy(&uc_fw->file_wanted, &file_ideal, sizeof(uc_fw->file_wanted));
 
-		UNEXPECTED(gt, "%s firmware %s (%d.%d.%d) is recommended, but only %s (%d.%d.%d) was found\n",
-			   intel_uc_fw_type_repr(uc_fw->type),
-			   uc_fw->file_wanted.path,
-			   uc_fw->file_wanted.ver.major,
-			   uc_fw->file_wanted.ver.minor,
-			   uc_fw->file_wanted.ver.patch,
-			   uc_fw->file_selected.path,
-			   uc_fw->file_selected.ver.major,
-			   uc_fw->file_selected.ver.minor,
-			   uc_fw->file_selected.ver.patch);
-		gt_info(gt, "Consider updating your linux-firmware pkg or downloading from %s\n",
-			INTEL_UC_FIRMWARE_URL);
+		UNEXPECTED(gt, "%s firmware is recommended, but not was found\n");
 	}
 
 	if (HAS_LMEM(i915)) {
@@ -903,10 +892,8 @@ int intel_uc_fw_fetch(struct intel_uc_fw *uc_fw)
 				  INTEL_UC_FIRMWARE_MISSING :
 				  INTEL_UC_FIRMWARE_ERROR);
 
-	gt_probe_error(gt, "%s firmware %s: fetch failed %pe\n",
-		       intel_uc_fw_type_repr(uc_fw->type), uc_fw->file_selected.path, ERR_PTR(err));
-	gt_info(gt, "%s firmware(s) can be downloaded from %s\n",
-		intel_uc_fw_type_repr(uc_fw->type), INTEL_UC_FIRMWARE_URL);
+	gt_probe_error(gt, "%s firmware: fetch failed %pe\n",
+		       intel_uc_fw_type_repr(uc_fw->type), ERR_PTR(err));
 
 	release_firmware(fw);		/* OK even if fw is NULL */
 	return err;
@@ -1041,8 +1028,8 @@ int intel_uc_fw_mark_load_failed(struct intel_uc_fw *uc_fw, int err)
 
 	GEM_BUG_ON(!intel_uc_fw_is_loadable(uc_fw));
 
-	gt_probe_error(gt, "Failed to load %s firmware %s %pe\n",
-		       intel_uc_fw_type_repr(uc_fw->type), uc_fw->file_selected.path, ERR_PTR(err));
+	gt_probe_error(gt, "Failed to load %s firmware %pe\n",
+		       intel_uc_fw_type_repr(uc_fw->type), ERR_PTR(err));
 	intel_uc_fw_change_status(uc_fw, INTEL_UC_FIRMWARE_LOAD_FAIL);
 
 	return err;
diff --git a/drivers/net/wireless/intel/iwlwifi/iwl-drv.c b/drivers/net/wireless/intel/iwlwifi/iwl-drv.c
index bd4c4174..9beeb2e6 100644
--- a/drivers/net/wireless/intel/iwlwifi/iwl-drv.c
+++ b/drivers/net/wireless/intel/iwlwifi/iwl-drv.c
@@ -239,27 +239,13 @@ static int iwl_request_firmware(struct iwl_drv *drv, bool first)
 
 	if (drv->fw_index < cfg->ucode_api_min) {
 		IWL_ERR(drv, "no suitable firmware found!\n");
-
-		if (cfg->ucode_api_min == cfg->ucode_api_max) {
-			IWL_ERR(drv, "%s-%d is required\n", fw_name_pre,
-				cfg->ucode_api_max);
-		} else {
-			IWL_ERR(drv, "minimum version required: %s-%d\n",
-				fw_name_pre, cfg->ucode_api_min);
-			IWL_ERR(drv, "maximum version supported: %s-%d\n",
-				fw_name_pre, cfg->ucode_api_max);
-		}
-
-		IWL_ERR(drv,
-			"check git://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git\n");
 		return -ENOENT;
 	}
 
 	snprintf(drv->firmware_name, sizeof(drv->firmware_name), "%s-%d.ucode",
 		 fw_name_pre, drv->fw_index);
 
-	IWL_DEBUG_FW_INFO(drv, "attempting to load firmware '%s'\n",
-			  drv->firmware_name);
+	IWL_DEBUG_FW_INFO(drv, "attempting to load firmware\n");
 
 	return request_firmware_nowait(THIS_MODULE, 1, drv->firmware_name,
 				       drv->trans->dev,
